// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dota_gcmessages_client_match_management.proto

package dota

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type EStartFindingMatchResult int32

const (
	EStartFindingMatchResult_k_EStartFindingMatchResult_Invalid                               EStartFindingMatchResult = 0
	EStartFindingMatchResult_k_EStartFindingMatchResult_OK                                    EStartFindingMatchResult = 1
	EStartFindingMatchResult_k_EStartFindingMatchResult_AlreadySearching                      EStartFindingMatchResult = 2
	EStartFindingMatchResult_k_EStartFindingMatchResult_FailGeneric                           EStartFindingMatchResult = 100
	EStartFindingMatchResult_k_EStartFindingMatchResult_FailedIgnore                          EStartFindingMatchResult = 101
	EStartFindingMatchResult_k_EStartFindingMatchResult_MatchmakingDisabled                   EStartFindingMatchResult = 102
	EStartFindingMatchResult_k_EStartFindingMatchResult_RegionOffline                         EStartFindingMatchResult = 103
	EStartFindingMatchResult_k_EStartFindingMatchResult_MatchmakingCooldown                   EStartFindingMatchResult = 104
	EStartFindingMatchResult_k_EStartFindingMatchResult_ClientOutOfDate                       EStartFindingMatchResult = 105
	EStartFindingMatchResult_k_EStartFindingMatchResult_CompetitiveNoLowPriority              EStartFindingMatchResult = 106
	EStartFindingMatchResult_k_EStartFindingMatchResult_CompetitiveNotUnlocked                EStartFindingMatchResult = 107
	EStartFindingMatchResult_k_EStartFindingMatchResult_GameModeNotUnlocked                   EStartFindingMatchResult = 108
	EStartFindingMatchResult_k_EStartFindingMatchResult_CompetitiveNotEnoughSkillData         EStartFindingMatchResult = 109
	EStartFindingMatchResult_k_EStartFindingMatchResult_MissingInitialSkill                   EStartFindingMatchResult = 110
	EStartFindingMatchResult_k_EStartFindingMatchResult_CompetitiveRankSpreadTooLarge         EStartFindingMatchResult = 111
	EStartFindingMatchResult_k_EStartFindingMatchResult_MemberAlreadyInLobby                  EStartFindingMatchResult = 112
	EStartFindingMatchResult_k_EStartFindingMatchResult_MemberNotVACVerified                  EStartFindingMatchResult = 113
	EStartFindingMatchResult_k_EStartFindingMatchResult_WeekendTourneyBadPartySize            EStartFindingMatchResult = 114
	EStartFindingMatchResult_k_EStartFindingMatchResult_WeekendTourneyTeamBuyInTooSmall       EStartFindingMatchResult = 115
	EStartFindingMatchResult_k_EStartFindingMatchResult_WeekendTourneyIndividualBuyInTooLarge EStartFindingMatchResult = 116
	EStartFindingMatchResult_k_EStartFindingMatchResult_WeekendTourneyTeamBuyInTooLarge       EStartFindingMatchResult = 117
	EStartFindingMatchResult_k_EStartFindingMatchResult_MemberMissingEventOwnership           EStartFindingMatchResult = 118
	EStartFindingMatchResult_k_EStartFindingMatchResult_WeekendTourneyNotUnlocked             EStartFindingMatchResult = 119
	EStartFindingMatchResult_k_EStartFindingMatchResult_WeekendTourneyRecentParticipation     EStartFindingMatchResult = 120
	EStartFindingMatchResult_k_EStartFindingMatchResult_MemberMissingAnchoredPhoneNumber      EStartFindingMatchResult = 121
	EStartFindingMatchResult_k_EStartFindingMatchResult_NotMemberOfClan                       EStartFindingMatchResult = 122
)

var EStartFindingMatchResult_name = map[int32]string{
	0:   "k_EStartFindingMatchResult_Invalid",
	1:   "k_EStartFindingMatchResult_OK",
	2:   "k_EStartFindingMatchResult_AlreadySearching",
	100: "k_EStartFindingMatchResult_FailGeneric",
	101: "k_EStartFindingMatchResult_FailedIgnore",
	102: "k_EStartFindingMatchResult_MatchmakingDisabled",
	103: "k_EStartFindingMatchResult_RegionOffline",
	104: "k_EStartFindingMatchResult_MatchmakingCooldown",
	105: "k_EStartFindingMatchResult_ClientOutOfDate",
	106: "k_EStartFindingMatchResult_CompetitiveNoLowPriority",
	107: "k_EStartFindingMatchResult_CompetitiveNotUnlocked",
	108: "k_EStartFindingMatchResult_GameModeNotUnlocked",
	109: "k_EStartFindingMatchResult_CompetitiveNotEnoughSkillData",
	110: "k_EStartFindingMatchResult_MissingInitialSkill",
	111: "k_EStartFindingMatchResult_CompetitiveRankSpreadTooLarge",
	112: "k_EStartFindingMatchResult_MemberAlreadyInLobby",
	113: "k_EStartFindingMatchResult_MemberNotVACVerified",
	114: "k_EStartFindingMatchResult_WeekendTourneyBadPartySize",
	115: "k_EStartFindingMatchResult_WeekendTourneyTeamBuyInTooSmall",
	116: "k_EStartFindingMatchResult_WeekendTourneyIndividualBuyInTooLarge",
	117: "k_EStartFindingMatchResult_WeekendTourneyTeamBuyInTooLarge",
	118: "k_EStartFindingMatchResult_MemberMissingEventOwnership",
	119: "k_EStartFindingMatchResult_WeekendTourneyNotUnlocked",
	120: "k_EStartFindingMatchResult_WeekendTourneyRecentParticipation",
	121: "k_EStartFindingMatchResult_MemberMissingAnchoredPhoneNumber",
	122: "k_EStartFindingMatchResult_NotMemberOfClan",
}
var EStartFindingMatchResult_value = map[string]int32{
	"k_EStartFindingMatchResult_Invalid":                               0,
	"k_EStartFindingMatchResult_OK":                                    1,
	"k_EStartFindingMatchResult_AlreadySearching":                      2,
	"k_EStartFindingMatchResult_FailGeneric":                           100,
	"k_EStartFindingMatchResult_FailedIgnore":                          101,
	"k_EStartFindingMatchResult_MatchmakingDisabled":                   102,
	"k_EStartFindingMatchResult_RegionOffline":                         103,
	"k_EStartFindingMatchResult_MatchmakingCooldown":                   104,
	"k_EStartFindingMatchResult_ClientOutOfDate":                       105,
	"k_EStartFindingMatchResult_CompetitiveNoLowPriority":              106,
	"k_EStartFindingMatchResult_CompetitiveNotUnlocked":                107,
	"k_EStartFindingMatchResult_GameModeNotUnlocked":                   108,
	"k_EStartFindingMatchResult_CompetitiveNotEnoughSkillData":         109,
	"k_EStartFindingMatchResult_MissingInitialSkill":                   110,
	"k_EStartFindingMatchResult_CompetitiveRankSpreadTooLarge":         111,
	"k_EStartFindingMatchResult_MemberAlreadyInLobby":                  112,
	"k_EStartFindingMatchResult_MemberNotVACVerified":                  113,
	"k_EStartFindingMatchResult_WeekendTourneyBadPartySize":            114,
	"k_EStartFindingMatchResult_WeekendTourneyTeamBuyInTooSmall":       115,
	"k_EStartFindingMatchResult_WeekendTourneyIndividualBuyInTooLarge": 116,
	"k_EStartFindingMatchResult_WeekendTourneyTeamBuyInTooLarge":       117,
	"k_EStartFindingMatchResult_MemberMissingEventOwnership":           118,
	"k_EStartFindingMatchResult_WeekendTourneyNotUnlocked":             119,
	"k_EStartFindingMatchResult_WeekendTourneyRecentParticipation":     120,
	"k_EStartFindingMatchResult_MemberMissingAnchoredPhoneNumber":      121,
	"k_EStartFindingMatchResult_NotMemberOfClan":                       122,
}

func (x EStartFindingMatchResult) Enum() *EStartFindingMatchResult {
	p := new(EStartFindingMatchResult)
	*p = x
	return p
}
func (x EStartFindingMatchResult) String() string {
	return proto.EnumName(EStartFindingMatchResult_name, int32(x))
}
func (x *EStartFindingMatchResult) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EStartFindingMatchResult_value, data, "EStartFindingMatchResult")
	if err != nil {
		return err
	}
	*x = EStartFindingMatchResult(value)
	return nil
}
func (EStartFindingMatchResult) EnumDescriptor() ([]byte, []int) { return fileDescriptor13, []int{0} }

type CMsgStartFindingMatch struct {
	Key                *string             `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Matchgroups        *uint32             `protobuf:"varint,2,opt,name=matchgroups,def=4294967295" json:"matchgroups,omitempty"`
	ClientVersion      *uint32             `protobuf:"varint,3,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	GameModes          *uint32             `protobuf:"varint,4,opt,name=game_modes,json=gameModes,def=4294967295" json:"game_modes,omitempty"`
	BotDifficulty      *DOTABotDifficulty  `protobuf:"varint,5,opt,name=bot_difficulty,json=botDifficulty,enum=dota.DOTABotDifficulty,def=3" json:"bot_difficulty,omitempty"`
	MatchType          *MatchType          `protobuf:"varint,6,opt,name=match_type,json=matchType,enum=dota.MatchType,def=0" json:"match_type,omitempty"`
	Matchlanguages     *uint32             `protobuf:"varint,7,opt,name=matchlanguages,def=4294967295" json:"matchlanguages,omitempty"`
	TeamId             *uint32             `protobuf:"varint,8,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	GameLanguageEnum   *MatchLanguages     `protobuf:"varint,10,opt,name=game_language_enum,json=gameLanguageEnum,enum=dota.MatchLanguages,def=0" json:"game_language_enum,omitempty"`
	GameLanguageName   *string             `protobuf:"bytes,11,opt,name=game_language_name,json=gameLanguageName" json:"game_language_name,omitempty"`
	PingData           *CMsgClientPingData `protobuf:"bytes,12,opt,name=ping_data,json=pingData" json:"ping_data,omitempty"`
	RegionSelectFlags  *uint32             `protobuf:"varint,13,opt,name=region_select_flags,json=regionSelectFlags" json:"region_select_flags,omitempty"`
	SoloQueue          *bool               `protobuf:"varint,14,opt,name=solo_queue,json=soloQueue" json:"solo_queue,omitempty"`
	BotScriptIndex     *uint32             `protobuf:"varint,15,opt,name=bot_script_index,json=botScriptIndex" json:"bot_script_index,omitempty"`
	SteamClanAccountId *uint32             `protobuf:"varint,16,opt,name=steam_clan_account_id,json=steamClanAccountId" json:"steam_clan_account_id,omitempty"`
	IsChallengeMatch   *bool               `protobuf:"varint,17,opt,name=is_challenge_match,json=isChallengeMatch" json:"is_challenge_match,omitempty"`
	LaneSelectionFlags *uint32             `protobuf:"varint,18,opt,name=lane_selection_flags,json=laneSelectionFlags" json:"lane_selection_flags,omitempty"`
	XXX_unrecognized   []byte              `json:"-"`
}

func (m *CMsgStartFindingMatch) Reset()                    { *m = CMsgStartFindingMatch{} }
func (m *CMsgStartFindingMatch) String() string            { return proto.CompactTextString(m) }
func (*CMsgStartFindingMatch) ProtoMessage()               {}
func (*CMsgStartFindingMatch) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{0} }

const Default_CMsgStartFindingMatch_Matchgroups uint32 = 4294967295
const Default_CMsgStartFindingMatch_GameModes uint32 = 4294967295
const Default_CMsgStartFindingMatch_BotDifficulty DOTABotDifficulty = DOTABotDifficulty_BOT_DIFFICULTY_HARD
const Default_CMsgStartFindingMatch_MatchType MatchType = MatchType_MATCH_TYPE_CASUAL
const Default_CMsgStartFindingMatch_Matchlanguages uint32 = 4294967295
const Default_CMsgStartFindingMatch_GameLanguageEnum MatchLanguages = MatchLanguages_MATCH_LANGUAGE_INVALID

func (m *CMsgStartFindingMatch) GetKey() string {
	if m != nil && m.Key != nil {
		return *m.Key
	}
	return ""
}

func (m *CMsgStartFindingMatch) GetMatchgroups() uint32 {
	if m != nil && m.Matchgroups != nil {
		return *m.Matchgroups
	}
	return Default_CMsgStartFindingMatch_Matchgroups
}

func (m *CMsgStartFindingMatch) GetClientVersion() uint32 {
	if m != nil && m.ClientVersion != nil {
		return *m.ClientVersion
	}
	return 0
}

func (m *CMsgStartFindingMatch) GetGameModes() uint32 {
	if m != nil && m.GameModes != nil {
		return *m.GameModes
	}
	return Default_CMsgStartFindingMatch_GameModes
}

func (m *CMsgStartFindingMatch) GetBotDifficulty() DOTABotDifficulty {
	if m != nil && m.BotDifficulty != nil {
		return *m.BotDifficulty
	}
	return Default_CMsgStartFindingMatch_BotDifficulty
}

func (m *CMsgStartFindingMatch) GetMatchType() MatchType {
	if m != nil && m.MatchType != nil {
		return *m.MatchType
	}
	return Default_CMsgStartFindingMatch_MatchType
}

func (m *CMsgStartFindingMatch) GetMatchlanguages() uint32 {
	if m != nil && m.Matchlanguages != nil {
		return *m.Matchlanguages
	}
	return Default_CMsgStartFindingMatch_Matchlanguages
}

func (m *CMsgStartFindingMatch) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CMsgStartFindingMatch) GetGameLanguageEnum() MatchLanguages {
	if m != nil && m.GameLanguageEnum != nil {
		return *m.GameLanguageEnum
	}
	return Default_CMsgStartFindingMatch_GameLanguageEnum
}

func (m *CMsgStartFindingMatch) GetGameLanguageName() string {
	if m != nil && m.GameLanguageName != nil {
		return *m.GameLanguageName
	}
	return ""
}

func (m *CMsgStartFindingMatch) GetPingData() *CMsgClientPingData {
	if m != nil {
		return m.PingData
	}
	return nil
}

func (m *CMsgStartFindingMatch) GetRegionSelectFlags() uint32 {
	if m != nil && m.RegionSelectFlags != nil {
		return *m.RegionSelectFlags
	}
	return 0
}

func (m *CMsgStartFindingMatch) GetSoloQueue() bool {
	if m != nil && m.SoloQueue != nil {
		return *m.SoloQueue
	}
	return false
}

func (m *CMsgStartFindingMatch) GetBotScriptIndex() uint32 {
	if m != nil && m.BotScriptIndex != nil {
		return *m.BotScriptIndex
	}
	return 0
}

func (m *CMsgStartFindingMatch) GetSteamClanAccountId() uint32 {
	if m != nil && m.SteamClanAccountId != nil {
		return *m.SteamClanAccountId
	}
	return 0
}

func (m *CMsgStartFindingMatch) GetIsChallengeMatch() bool {
	if m != nil && m.IsChallengeMatch != nil {
		return *m.IsChallengeMatch
	}
	return false
}

func (m *CMsgStartFindingMatch) GetLaneSelectionFlags() uint32 {
	if m != nil && m.LaneSelectionFlags != nil {
		return *m.LaneSelectionFlags
	}
	return 0
}

type CMsgStartFindingMatchResult struct {
	LegacyGenericEresult    *uint32                   `protobuf:"varint,1,opt,name=legacy_generic_eresult,json=legacyGenericEresult,def=2" json:"legacy_generic_eresult,omitempty"`
	Result                  *EStartFindingMatchResult `protobuf:"varint,2,opt,name=result,enum=dota.EStartFindingMatchResult,def=0" json:"result,omitempty"`
	ErrorToken              *string                   `protobuf:"bytes,3,opt,name=error_token,json=errorToken" json:"error_token,omitempty"`
	DebugMessage            *string                   `protobuf:"bytes,4,opt,name=debug_message,json=debugMessage" json:"debug_message,omitempty"`
	ResponsiblePartyMembers []uint64                  `protobuf:"fixed64,5,rep,name=responsible_party_members,json=responsiblePartyMembers" json:"responsible_party_members,omitempty"`
	XXX_unrecognized        []byte                    `json:"-"`
}

func (m *CMsgStartFindingMatchResult) Reset()                    { *m = CMsgStartFindingMatchResult{} }
func (m *CMsgStartFindingMatchResult) String() string            { return proto.CompactTextString(m) }
func (*CMsgStartFindingMatchResult) ProtoMessage()               {}
func (*CMsgStartFindingMatchResult) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{1} }

const Default_CMsgStartFindingMatchResult_LegacyGenericEresult uint32 = 2
const Default_CMsgStartFindingMatchResult_Result EStartFindingMatchResult = EStartFindingMatchResult_k_EStartFindingMatchResult_Invalid

func (m *CMsgStartFindingMatchResult) GetLegacyGenericEresult() uint32 {
	if m != nil && m.LegacyGenericEresult != nil {
		return *m.LegacyGenericEresult
	}
	return Default_CMsgStartFindingMatchResult_LegacyGenericEresult
}

func (m *CMsgStartFindingMatchResult) GetResult() EStartFindingMatchResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgStartFindingMatchResult_Result
}

func (m *CMsgStartFindingMatchResult) GetErrorToken() string {
	if m != nil && m.ErrorToken != nil {
		return *m.ErrorToken
	}
	return ""
}

func (m *CMsgStartFindingMatchResult) GetDebugMessage() string {
	if m != nil && m.DebugMessage != nil {
		return *m.DebugMessage
	}
	return ""
}

func (m *CMsgStartFindingMatchResult) GetResponsiblePartyMembers() []uint64 {
	if m != nil {
		return m.ResponsiblePartyMembers
	}
	return nil
}

type CMsgStopFindingMatch struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMsgStopFindingMatch) Reset()                    { *m = CMsgStopFindingMatch{} }
func (m *CMsgStopFindingMatch) String() string            { return proto.CompactTextString(m) }
func (*CMsgStopFindingMatch) ProtoMessage()               {}
func (*CMsgStopFindingMatch) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{2} }

type CMsgPartyBuilderOptions struct {
	AdditionalSlots  *uint32         `protobuf:"varint,1,opt,name=additional_slots,json=additionalSlots" json:"additional_slots,omitempty"`
	MatchType        *MatchType      `protobuf:"varint,2,opt,name=match_type,json=matchType,enum=dota.MatchType,def=0" json:"match_type,omitempty"`
	Matchgroups      *uint32         `protobuf:"varint,3,opt,name=matchgroups" json:"matchgroups,omitempty"`
	ClientVersion    *uint32         `protobuf:"varint,4,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	Language         *MatchLanguages `protobuf:"varint,5,opt,name=language,enum=dota.MatchLanguages,def=0" json:"language,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *CMsgPartyBuilderOptions) Reset()                    { *m = CMsgPartyBuilderOptions{} }
func (m *CMsgPartyBuilderOptions) String() string            { return proto.CompactTextString(m) }
func (*CMsgPartyBuilderOptions) ProtoMessage()               {}
func (*CMsgPartyBuilderOptions) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{3} }

const Default_CMsgPartyBuilderOptions_MatchType MatchType = MatchType_MATCH_TYPE_CASUAL
const Default_CMsgPartyBuilderOptions_Language MatchLanguages = MatchLanguages_MATCH_LANGUAGE_INVALID

func (m *CMsgPartyBuilderOptions) GetAdditionalSlots() uint32 {
	if m != nil && m.AdditionalSlots != nil {
		return *m.AdditionalSlots
	}
	return 0
}

func (m *CMsgPartyBuilderOptions) GetMatchType() MatchType {
	if m != nil && m.MatchType != nil {
		return *m.MatchType
	}
	return Default_CMsgPartyBuilderOptions_MatchType
}

func (m *CMsgPartyBuilderOptions) GetMatchgroups() uint32 {
	if m != nil && m.Matchgroups != nil {
		return *m.Matchgroups
	}
	return 0
}

func (m *CMsgPartyBuilderOptions) GetClientVersion() uint32 {
	if m != nil && m.ClientVersion != nil {
		return *m.ClientVersion
	}
	return 0
}

func (m *CMsgPartyBuilderOptions) GetLanguage() MatchLanguages {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return Default_CMsgPartyBuilderOptions_Language
}

type CMsgReadyUp struct {
	State            *DOTALobbyReadyState      `protobuf:"varint,1,opt,name=state,enum=dota.DOTALobbyReadyState,def=0" json:"state,omitempty"`
	ReadyUpKey       *uint64                   `protobuf:"fixed64,2,opt,name=ready_up_key,json=readyUpKey" json:"ready_up_key,omitempty"`
	HardwareSpecs    *CDOTAClientHardwareSpecs `protobuf:"bytes,3,opt,name=hardware_specs,json=hardwareSpecs" json:"hardware_specs,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *CMsgReadyUp) Reset()                    { *m = CMsgReadyUp{} }
func (m *CMsgReadyUp) String() string            { return proto.CompactTextString(m) }
func (*CMsgReadyUp) ProtoMessage()               {}
func (*CMsgReadyUp) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{4} }

const Default_CMsgReadyUp_State DOTALobbyReadyState = DOTALobbyReadyState_DOTALobbyReadyState_UNDECLARED

func (m *CMsgReadyUp) GetState() DOTALobbyReadyState {
	if m != nil && m.State != nil {
		return *m.State
	}
	return Default_CMsgReadyUp_State
}

func (m *CMsgReadyUp) GetReadyUpKey() uint64 {
	if m != nil && m.ReadyUpKey != nil {
		return *m.ReadyUpKey
	}
	return 0
}

func (m *CMsgReadyUp) GetHardwareSpecs() *CDOTAClientHardwareSpecs {
	if m != nil {
		return m.HardwareSpecs
	}
	return nil
}

type CMsgReadyUpStatus struct {
	LobbyId          *uint64  `protobuf:"fixed64,1,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	AcceptedIds      []uint32 `protobuf:"varint,2,rep,name=accepted_ids,json=acceptedIds" json:"accepted_ids,omitempty"`
	DeclinedIds      []uint32 `protobuf:"varint,3,rep,name=declined_ids,json=declinedIds" json:"declined_ids,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgReadyUpStatus) Reset()                    { *m = CMsgReadyUpStatus{} }
func (m *CMsgReadyUpStatus) String() string            { return proto.CompactTextString(m) }
func (*CMsgReadyUpStatus) ProtoMessage()               {}
func (*CMsgReadyUpStatus) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{5} }

func (m *CMsgReadyUpStatus) GetLobbyId() uint64 {
	if m != nil && m.LobbyId != nil {
		return *m.LobbyId
	}
	return 0
}

func (m *CMsgReadyUpStatus) GetAcceptedIds() []uint32 {
	if m != nil {
		return m.AcceptedIds
	}
	return nil
}

func (m *CMsgReadyUpStatus) GetDeclinedIds() []uint32 {
	if m != nil {
		return m.DeclinedIds
	}
	return nil
}

type CMsgAbandonCurrentGame struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMsgAbandonCurrentGame) Reset()                    { *m = CMsgAbandonCurrentGame{} }
func (m *CMsgAbandonCurrentGame) String() string            { return proto.CompactTextString(m) }
func (*CMsgAbandonCurrentGame) ProtoMessage()               {}
func (*CMsgAbandonCurrentGame) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{6} }

type CMsgPracticeLobbySetDetails struct {
	LobbyId                   *uint64                     `protobuf:"varint,1,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	GameName                  *string                     `protobuf:"bytes,2,opt,name=game_name,json=gameName" json:"game_name,omitempty"`
	TeamDetails               []*CLobbyTeamDetails        `protobuf:"bytes,3,rep,name=team_details,json=teamDetails" json:"team_details,omitempty"`
	ServerRegion              *uint32                     `protobuf:"varint,4,opt,name=server_region,json=serverRegion" json:"server_region,omitempty"`
	GameMode                  *uint32                     `protobuf:"varint,5,opt,name=game_mode,json=gameMode" json:"game_mode,omitempty"`
	CmPick                    *DOTA_CM_PICK               `protobuf:"varint,6,opt,name=cm_pick,json=cmPick,enum=dota.DOTA_CM_PICK,def=0" json:"cm_pick,omitempty"`
	BotDifficultyRadiant      *DOTABotDifficulty          `protobuf:"varint,9,opt,name=bot_difficulty_radiant,json=botDifficultyRadiant,enum=dota.DOTABotDifficulty,def=0" json:"bot_difficulty_radiant,omitempty"`
	AllowCheats               *bool                       `protobuf:"varint,10,opt,name=allow_cheats,json=allowCheats" json:"allow_cheats,omitempty"`
	FillWithBots              *bool                       `protobuf:"varint,11,opt,name=fill_with_bots,json=fillWithBots" json:"fill_with_bots,omitempty"`
	IntroMode                 *bool                       `protobuf:"varint,12,opt,name=intro_mode,json=introMode" json:"intro_mode,omitempty"`
	AllowSpectating           *bool                       `protobuf:"varint,13,opt,name=allow_spectating,json=allowSpectating" json:"allow_spectating,omitempty"`
	GameVersion               *DOTAGameVersion            `protobuf:"varint,14,opt,name=game_version,json=gameVersion,enum=dota.DOTAGameVersion,def=0" json:"game_version,omitempty"`
	PassKey                   *string                     `protobuf:"bytes,15,opt,name=pass_key,json=passKey" json:"pass_key,omitempty"`
	Leagueid                  *uint32                     `protobuf:"varint,16,opt,name=leagueid" json:"leagueid,omitempty"`
	PenaltyLevelRadiant       *uint32                     `protobuf:"varint,17,opt,name=penalty_level_radiant,json=penaltyLevelRadiant" json:"penalty_level_radiant,omitempty"`
	PenaltyLevelDire          *uint32                     `protobuf:"varint,18,opt,name=penalty_level_dire,json=penaltyLevelDire" json:"penalty_level_dire,omitempty"`
	LoadGameId                *uint32                     `protobuf:"varint,19,opt,name=load_game_id,json=loadGameId" json:"load_game_id,omitempty"`
	SeriesType                *uint32                     `protobuf:"varint,20,opt,name=series_type,json=seriesType" json:"series_type,omitempty"`
	RadiantSeriesWins         *uint32                     `protobuf:"varint,21,opt,name=radiant_series_wins,json=radiantSeriesWins" json:"radiant_series_wins,omitempty"`
	DireSeriesWins            *uint32                     `protobuf:"varint,22,opt,name=dire_series_wins,json=direSeriesWins" json:"dire_series_wins,omitempty"`
	Allchat                   *bool                       `protobuf:"varint,23,opt,name=allchat,def=0" json:"allchat,omitempty"`
	DotaTvDelay               *LobbyDotaTVDelay           `protobuf:"varint,24,opt,name=dota_tv_delay,json=dotaTvDelay,enum=dota.LobbyDotaTVDelay,def=1" json:"dota_tv_delay,omitempty"`
	Lan                       *bool                       `protobuf:"varint,25,opt,name=lan" json:"lan,omitempty"`
	CustomGameMode            *string                     `protobuf:"bytes,26,opt,name=custom_game_mode,json=customGameMode" json:"custom_game_mode,omitempty"`
	CustomMapName             *string                     `protobuf:"bytes,27,opt,name=custom_map_name,json=customMapName" json:"custom_map_name,omitempty"`
	CustomDifficulty          *uint32                     `protobuf:"varint,28,opt,name=custom_difficulty,json=customDifficulty" json:"custom_difficulty,omitempty"`
	CustomGameId              *uint64                     `protobuf:"varint,29,opt,name=custom_game_id,json=customGameId" json:"custom_game_id,omitempty"`
	CustomMinPlayers          *uint32                     `protobuf:"varint,30,opt,name=custom_min_players,json=customMinPlayers" json:"custom_min_players,omitempty"`
	CustomMaxPlayers          *uint32                     `protobuf:"varint,31,opt,name=custom_max_players,json=customMaxPlayers" json:"custom_max_players,omitempty"`
	LanHostPingToServerRegion *uint32                     `protobuf:"varint,32,opt,name=lan_host_ping_to_server_region,json=lanHostPingToServerRegion" json:"lan_host_ping_to_server_region,omitempty"`
	Visibility                *DOTALobbyVisibility        `protobuf:"varint,33,opt,name=visibility,enum=dota.DOTALobbyVisibility,def=0" json:"visibility,omitempty"`
	CustomGameCrc             *uint64                     `protobuf:"fixed64,34,opt,name=custom_game_crc,json=customGameCrc" json:"custom_game_crc,omitempty"`
	LeagueSeriesId            *uint32                     `protobuf:"varint,35,opt,name=league_series_id,json=leagueSeriesId" json:"league_series_id,omitempty"`
	LeagueGameId              *uint32                     `protobuf:"varint,36,opt,name=league_game_id,json=leagueGameId" json:"league_game_id,omitempty"`
	CustomGameTimestamp       *uint32                     `protobuf:"fixed32,37,opt,name=custom_game_timestamp,json=customGameTimestamp" json:"custom_game_timestamp,omitempty"`
	PreviousMatchOverride     *uint64                     `protobuf:"varint,38,opt,name=previous_match_override,json=previousMatchOverride" json:"previous_match_override,omitempty"`
	PauseSetting              *LobbyDotaPauseSetting      `protobuf:"varint,42,opt,name=pause_setting,json=pauseSetting,enum=dota.LobbyDotaPauseSetting,def=0" json:"pause_setting,omitempty"`
	BotDifficultyDire         *DOTABotDifficulty          `protobuf:"varint,43,opt,name=bot_difficulty_dire,json=botDifficultyDire,enum=dota.DOTABotDifficulty,def=0" json:"bot_difficulty_dire,omitempty"`
	BotRadiant                *uint64                     `protobuf:"varint,44,opt,name=bot_radiant,json=botRadiant" json:"bot_radiant,omitempty"`
	BotDire                   *uint64                     `protobuf:"varint,45,opt,name=bot_dire,json=botDire" json:"bot_dire,omitempty"`
	SelectionPriorityRules    *DOTASelectionPriorityRules `protobuf:"varint,46,opt,name=selection_priority_rules,json=selectionPriorityRules,enum=dota.DOTASelectionPriorityRules,def=0" json:"selection_priority_rules,omitempty"`
	CustomGamePenalties       *bool                       `protobuf:"varint,47,opt,name=custom_game_penalties,json=customGamePenalties" json:"custom_game_penalties,omitempty"`
	XXX_unrecognized          []byte                      `json:"-"`
}

func (m *CMsgPracticeLobbySetDetails) Reset()                    { *m = CMsgPracticeLobbySetDetails{} }
func (m *CMsgPracticeLobbySetDetails) String() string            { return proto.CompactTextString(m) }
func (*CMsgPracticeLobbySetDetails) ProtoMessage()               {}
func (*CMsgPracticeLobbySetDetails) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{7} }

const Default_CMsgPracticeLobbySetDetails_CmPick DOTA_CM_PICK = DOTA_CM_PICK_DOTA_CM_RANDOM
const Default_CMsgPracticeLobbySetDetails_BotDifficultyRadiant DOTABotDifficulty = DOTABotDifficulty_BOT_DIFFICULTY_PASSIVE
const Default_CMsgPracticeLobbySetDetails_GameVersion DOTAGameVersion = DOTAGameVersion_GAME_VERSION_CURRENT
const Default_CMsgPracticeLobbySetDetails_Allchat bool = false
const Default_CMsgPracticeLobbySetDetails_DotaTvDelay LobbyDotaTVDelay = LobbyDotaTVDelay_LobbyDotaTV_120
const Default_CMsgPracticeLobbySetDetails_Visibility DOTALobbyVisibility = DOTALobbyVisibility_DOTALobbyVisibility_Public
const Default_CMsgPracticeLobbySetDetails_PauseSetting LobbyDotaPauseSetting = LobbyDotaPauseSetting_LobbyDotaPauseSetting_Unlimited
const Default_CMsgPracticeLobbySetDetails_BotDifficultyDire DOTABotDifficulty = DOTABotDifficulty_BOT_DIFFICULTY_PASSIVE
const Default_CMsgPracticeLobbySetDetails_SelectionPriorityRules DOTASelectionPriorityRules = DOTASelectionPriorityRules_k_DOTASelectionPriorityRules_Manual

func (m *CMsgPracticeLobbySetDetails) GetLobbyId() uint64 {
	if m != nil && m.LobbyId != nil {
		return *m.LobbyId
	}
	return 0
}

func (m *CMsgPracticeLobbySetDetails) GetGameName() string {
	if m != nil && m.GameName != nil {
		return *m.GameName
	}
	return ""
}

func (m *CMsgPracticeLobbySetDetails) GetTeamDetails() []*CLobbyTeamDetails {
	if m != nil {
		return m.TeamDetails
	}
	return nil
}

func (m *CMsgPracticeLobbySetDetails) GetServerRegion() uint32 {
	if m != nil && m.ServerRegion != nil {
		return *m.ServerRegion
	}
	return 0
}

func (m *CMsgPracticeLobbySetDetails) GetGameMode() uint32 {
	if m != nil && m.GameMode != nil {
		return *m.GameMode
	}
	return 0
}

func (m *CMsgPracticeLobbySetDetails) GetCmPick() DOTA_CM_PICK {
	if m != nil && m.CmPick != nil {
		return *m.CmPick
	}
	return Default_CMsgPracticeLobbySetDetails_CmPick
}

func (m *CMsgPracticeLobbySetDetails) GetBotDifficultyRadiant() DOTABotDifficulty {
	if m != nil && m.BotDifficultyRadiant != nil {
		return *m.BotDifficultyRadiant
	}
	return Default_CMsgPracticeLobbySetDetails_BotDifficultyRadiant
}

func (m *CMsgPracticeLobbySetDetails) GetAllowCheats() bool {
	if m != nil && m.AllowCheats != nil {
		return *m.AllowCheats
	}
	return false
}

func (m *CMsgPracticeLobbySetDetails) GetFillWithBots() bool {
	if m != nil && m.FillWithBots != nil {
		return *m.FillWithBots
	}
	return false
}

func (m *CMsgPracticeLobbySetDetails) GetIntroMode() bool {
	if m != nil && m.IntroMode != nil {
		return *m.IntroMode
	}
	return false
}

func (m *CMsgPracticeLobbySetDetails) GetAllowSpectating() bool {
	if m != nil && m.AllowSpectating != nil {
		return *m.AllowSpectating
	}
	return false
}

func (m *CMsgPracticeLobbySetDetails) GetGameVersion() DOTAGameVersion {
	if m != nil && m.GameVersion != nil {
		return *m.GameVersion
	}
	return Default_CMsgPracticeLobbySetDetails_GameVersion
}

func (m *CMsgPracticeLobbySetDetails) GetPassKey() string {
	if m != nil && m.PassKey != nil {
		return *m.PassKey
	}
	return ""
}

func (m *CMsgPracticeLobbySetDetails) GetLeagueid() uint32 {
	if m != nil && m.Leagueid != nil {
		return *m.Leagueid
	}
	return 0
}

func (m *CMsgPracticeLobbySetDetails) GetPenaltyLevelRadiant() uint32 {
	if m != nil && m.PenaltyLevelRadiant != nil {
		return *m.PenaltyLevelRadiant
	}
	return 0
}

func (m *CMsgPracticeLobbySetDetails) GetPenaltyLevelDire() uint32 {
	if m != nil && m.PenaltyLevelDire != nil {
		return *m.PenaltyLevelDire
	}
	return 0
}

func (m *CMsgPracticeLobbySetDetails) GetLoadGameId() uint32 {
	if m != nil && m.LoadGameId != nil {
		return *m.LoadGameId
	}
	return 0
}

func (m *CMsgPracticeLobbySetDetails) GetSeriesType() uint32 {
	if m != nil && m.SeriesType != nil {
		return *m.SeriesType
	}
	return 0
}

func (m *CMsgPracticeLobbySetDetails) GetRadiantSeriesWins() uint32 {
	if m != nil && m.RadiantSeriesWins != nil {
		return *m.RadiantSeriesWins
	}
	return 0
}

func (m *CMsgPracticeLobbySetDetails) GetDireSeriesWins() uint32 {
	if m != nil && m.DireSeriesWins != nil {
		return *m.DireSeriesWins
	}
	return 0
}

func (m *CMsgPracticeLobbySetDetails) GetAllchat() bool {
	if m != nil && m.Allchat != nil {
		return *m.Allchat
	}
	return Default_CMsgPracticeLobbySetDetails_Allchat
}

func (m *CMsgPracticeLobbySetDetails) GetDotaTvDelay() LobbyDotaTVDelay {
	if m != nil && m.DotaTvDelay != nil {
		return *m.DotaTvDelay
	}
	return Default_CMsgPracticeLobbySetDetails_DotaTvDelay
}

func (m *CMsgPracticeLobbySetDetails) GetLan() bool {
	if m != nil && m.Lan != nil {
		return *m.Lan
	}
	return false
}

func (m *CMsgPracticeLobbySetDetails) GetCustomGameMode() string {
	if m != nil && m.CustomGameMode != nil {
		return *m.CustomGameMode
	}
	return ""
}

func (m *CMsgPracticeLobbySetDetails) GetCustomMapName() string {
	if m != nil && m.CustomMapName != nil {
		return *m.CustomMapName
	}
	return ""
}

func (m *CMsgPracticeLobbySetDetails) GetCustomDifficulty() uint32 {
	if m != nil && m.CustomDifficulty != nil {
		return *m.CustomDifficulty
	}
	return 0
}

func (m *CMsgPracticeLobbySetDetails) GetCustomGameId() uint64 {
	if m != nil && m.CustomGameId != nil {
		return *m.CustomGameId
	}
	return 0
}

func (m *CMsgPracticeLobbySetDetails) GetCustomMinPlayers() uint32 {
	if m != nil && m.CustomMinPlayers != nil {
		return *m.CustomMinPlayers
	}
	return 0
}

func (m *CMsgPracticeLobbySetDetails) GetCustomMaxPlayers() uint32 {
	if m != nil && m.CustomMaxPlayers != nil {
		return *m.CustomMaxPlayers
	}
	return 0
}

func (m *CMsgPracticeLobbySetDetails) GetLanHostPingToServerRegion() uint32 {
	if m != nil && m.LanHostPingToServerRegion != nil {
		return *m.LanHostPingToServerRegion
	}
	return 0
}

func (m *CMsgPracticeLobbySetDetails) GetVisibility() DOTALobbyVisibility {
	if m != nil && m.Visibility != nil {
		return *m.Visibility
	}
	return Default_CMsgPracticeLobbySetDetails_Visibility
}

func (m *CMsgPracticeLobbySetDetails) GetCustomGameCrc() uint64 {
	if m != nil && m.CustomGameCrc != nil {
		return *m.CustomGameCrc
	}
	return 0
}

func (m *CMsgPracticeLobbySetDetails) GetLeagueSeriesId() uint32 {
	if m != nil && m.LeagueSeriesId != nil {
		return *m.LeagueSeriesId
	}
	return 0
}

func (m *CMsgPracticeLobbySetDetails) GetLeagueGameId() uint32 {
	if m != nil && m.LeagueGameId != nil {
		return *m.LeagueGameId
	}
	return 0
}

func (m *CMsgPracticeLobbySetDetails) GetCustomGameTimestamp() uint32 {
	if m != nil && m.CustomGameTimestamp != nil {
		return *m.CustomGameTimestamp
	}
	return 0
}

func (m *CMsgPracticeLobbySetDetails) GetPreviousMatchOverride() uint64 {
	if m != nil && m.PreviousMatchOverride != nil {
		return *m.PreviousMatchOverride
	}
	return 0
}

func (m *CMsgPracticeLobbySetDetails) GetPauseSetting() LobbyDotaPauseSetting {
	if m != nil && m.PauseSetting != nil {
		return *m.PauseSetting
	}
	return Default_CMsgPracticeLobbySetDetails_PauseSetting
}

func (m *CMsgPracticeLobbySetDetails) GetBotDifficultyDire() DOTABotDifficulty {
	if m != nil && m.BotDifficultyDire != nil {
		return *m.BotDifficultyDire
	}
	return Default_CMsgPracticeLobbySetDetails_BotDifficultyDire
}

func (m *CMsgPracticeLobbySetDetails) GetBotRadiant() uint64 {
	if m != nil && m.BotRadiant != nil {
		return *m.BotRadiant
	}
	return 0
}

func (m *CMsgPracticeLobbySetDetails) GetBotDire() uint64 {
	if m != nil && m.BotDire != nil {
		return *m.BotDire
	}
	return 0
}

func (m *CMsgPracticeLobbySetDetails) GetSelectionPriorityRules() DOTASelectionPriorityRules {
	if m != nil && m.SelectionPriorityRules != nil {
		return *m.SelectionPriorityRules
	}
	return Default_CMsgPracticeLobbySetDetails_SelectionPriorityRules
}

func (m *CMsgPracticeLobbySetDetails) GetCustomGamePenalties() bool {
	if m != nil && m.CustomGamePenalties != nil {
		return *m.CustomGamePenalties
	}
	return false
}

type CMsgPracticeLobbyCreate struct {
	SearchKey        *string                           `protobuf:"bytes,1,opt,name=search_key,json=searchKey" json:"search_key,omitempty"`
	PassKey          *string                           `protobuf:"bytes,5,opt,name=pass_key,json=passKey" json:"pass_key,omitempty"`
	ClientVersion    *uint32                           `protobuf:"varint,6,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	LobbyDetails     *CMsgPracticeLobbySetDetails      `protobuf:"bytes,7,opt,name=lobby_details,json=lobbyDetails" json:"lobby_details,omitempty"`
	SaveGame         *CMsgPracticeLobbyCreate_SaveGame `protobuf:"bytes,8,opt,name=save_game,json=saveGame" json:"save_game,omitempty"`
	XXX_unrecognized []byte                            `json:"-"`
}

func (m *CMsgPracticeLobbyCreate) Reset()                    { *m = CMsgPracticeLobbyCreate{} }
func (m *CMsgPracticeLobbyCreate) String() string            { return proto.CompactTextString(m) }
func (*CMsgPracticeLobbyCreate) ProtoMessage()               {}
func (*CMsgPracticeLobbyCreate) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{8} }

func (m *CMsgPracticeLobbyCreate) GetSearchKey() string {
	if m != nil && m.SearchKey != nil {
		return *m.SearchKey
	}
	return ""
}

func (m *CMsgPracticeLobbyCreate) GetPassKey() string {
	if m != nil && m.PassKey != nil {
		return *m.PassKey
	}
	return ""
}

func (m *CMsgPracticeLobbyCreate) GetClientVersion() uint32 {
	if m != nil && m.ClientVersion != nil {
		return *m.ClientVersion
	}
	return 0
}

func (m *CMsgPracticeLobbyCreate) GetLobbyDetails() *CMsgPracticeLobbySetDetails {
	if m != nil {
		return m.LobbyDetails
	}
	return nil
}

func (m *CMsgPracticeLobbyCreate) GetSaveGame() *CMsgPracticeLobbyCreate_SaveGame {
	if m != nil {
		return m.SaveGame
	}
	return nil
}

type CMsgPracticeLobbyCreate_SaveGame struct {
	Data             []byte  `protobuf:"bytes,1,opt,name=data" json:"data,omitempty"`
	Version          *int32  `protobuf:"varint,2,opt,name=version" json:"version,omitempty"`
	SteamId          *uint64 `protobuf:"fixed64,3,opt,name=steam_id,json=steamId" json:"steam_id,omitempty"`
	Signature        *uint64 `protobuf:"fixed64,4,opt,name=signature" json:"signature,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgPracticeLobbyCreate_SaveGame) Reset()         { *m = CMsgPracticeLobbyCreate_SaveGame{} }
func (m *CMsgPracticeLobbyCreate_SaveGame) String() string { return proto.CompactTextString(m) }
func (*CMsgPracticeLobbyCreate_SaveGame) ProtoMessage()    {}
func (*CMsgPracticeLobbyCreate_SaveGame) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{8, 0}
}

func (m *CMsgPracticeLobbyCreate_SaveGame) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *CMsgPracticeLobbyCreate_SaveGame) GetVersion() int32 {
	if m != nil && m.Version != nil {
		return *m.Version
	}
	return 0
}

func (m *CMsgPracticeLobbyCreate_SaveGame) GetSteamId() uint64 {
	if m != nil && m.SteamId != nil {
		return *m.SteamId
	}
	return 0
}

func (m *CMsgPracticeLobbyCreate_SaveGame) GetSignature() uint64 {
	if m != nil && m.Signature != nil {
		return *m.Signature
	}
	return 0
}

type CMsgPracticeLobbySetTeamSlot struct {
	Team             *DOTA_GC_TEAM      `protobuf:"varint,1,opt,name=team,enum=dota.DOTA_GC_TEAM,def=0" json:"team,omitempty"`
	Slot             *uint32            `protobuf:"varint,2,opt,name=slot" json:"slot,omitempty"`
	BotDifficulty    *DOTABotDifficulty `protobuf:"varint,3,opt,name=bot_difficulty,json=botDifficulty,enum=dota.DOTABotDifficulty,def=0" json:"bot_difficulty,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *CMsgPracticeLobbySetTeamSlot) Reset()                    { *m = CMsgPracticeLobbySetTeamSlot{} }
func (m *CMsgPracticeLobbySetTeamSlot) String() string            { return proto.CompactTextString(m) }
func (*CMsgPracticeLobbySetTeamSlot) ProtoMessage()               {}
func (*CMsgPracticeLobbySetTeamSlot) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{9} }

const Default_CMsgPracticeLobbySetTeamSlot_Team DOTA_GC_TEAM = DOTA_GC_TEAM_DOTA_GC_TEAM_GOOD_GUYS
const Default_CMsgPracticeLobbySetTeamSlot_BotDifficulty DOTABotDifficulty = DOTABotDifficulty_BOT_DIFFICULTY_PASSIVE

func (m *CMsgPracticeLobbySetTeamSlot) GetTeam() DOTA_GC_TEAM {
	if m != nil && m.Team != nil {
		return *m.Team
	}
	return Default_CMsgPracticeLobbySetTeamSlot_Team
}

func (m *CMsgPracticeLobbySetTeamSlot) GetSlot() uint32 {
	if m != nil && m.Slot != nil {
		return *m.Slot
	}
	return 0
}

func (m *CMsgPracticeLobbySetTeamSlot) GetBotDifficulty() DOTABotDifficulty {
	if m != nil && m.BotDifficulty != nil {
		return *m.BotDifficulty
	}
	return Default_CMsgPracticeLobbySetTeamSlot_BotDifficulty
}

type CMsgPracticeLobbySetCoach struct {
	Team             *DOTA_GC_TEAM `protobuf:"varint,1,opt,name=team,enum=dota.DOTA_GC_TEAM,def=0" json:"team,omitempty"`
	XXX_unrecognized []byte        `json:"-"`
}

func (m *CMsgPracticeLobbySetCoach) Reset()                    { *m = CMsgPracticeLobbySetCoach{} }
func (m *CMsgPracticeLobbySetCoach) String() string            { return proto.CompactTextString(m) }
func (*CMsgPracticeLobbySetCoach) ProtoMessage()               {}
func (*CMsgPracticeLobbySetCoach) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{10} }

const Default_CMsgPracticeLobbySetCoach_Team DOTA_GC_TEAM = DOTA_GC_TEAM_DOTA_GC_TEAM_GOOD_GUYS

func (m *CMsgPracticeLobbySetCoach) GetTeam() DOTA_GC_TEAM {
	if m != nil && m.Team != nil {
		return *m.Team
	}
	return Default_CMsgPracticeLobbySetCoach_Team
}

type CMsgPracticeLobbyJoinBroadcastChannel struct {
	Channel               *uint32 `protobuf:"varint,1,opt,name=channel" json:"channel,omitempty"`
	PreferredDescription  *string `protobuf:"bytes,2,opt,name=preferred_description,json=preferredDescription" json:"preferred_description,omitempty"`
	PreferredCountryCode  *string `protobuf:"bytes,3,opt,name=preferred_country_code,json=preferredCountryCode" json:"preferred_country_code,omitempty"`
	PreferredLanguageCode *string `protobuf:"bytes,4,opt,name=preferred_language_code,json=preferredLanguageCode" json:"preferred_language_code,omitempty"`
	XXX_unrecognized      []byte  `json:"-"`
}

func (m *CMsgPracticeLobbyJoinBroadcastChannel) Reset()         { *m = CMsgPracticeLobbyJoinBroadcastChannel{} }
func (m *CMsgPracticeLobbyJoinBroadcastChannel) String() string { return proto.CompactTextString(m) }
func (*CMsgPracticeLobbyJoinBroadcastChannel) ProtoMessage()    {}
func (*CMsgPracticeLobbyJoinBroadcastChannel) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{11}
}

func (m *CMsgPracticeLobbyJoinBroadcastChannel) GetChannel() uint32 {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return 0
}

func (m *CMsgPracticeLobbyJoinBroadcastChannel) GetPreferredDescription() string {
	if m != nil && m.PreferredDescription != nil {
		return *m.PreferredDescription
	}
	return ""
}

func (m *CMsgPracticeLobbyJoinBroadcastChannel) GetPreferredCountryCode() string {
	if m != nil && m.PreferredCountryCode != nil {
		return *m.PreferredCountryCode
	}
	return ""
}

func (m *CMsgPracticeLobbyJoinBroadcastChannel) GetPreferredLanguageCode() string {
	if m != nil && m.PreferredLanguageCode != nil {
		return *m.PreferredLanguageCode
	}
	return ""
}

type CMsgPracticeLobbyCloseBroadcastChannel struct {
	Channel          *uint32 `protobuf:"varint,1,opt,name=channel" json:"channel,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgPracticeLobbyCloseBroadcastChannel) Reset() {
	*m = CMsgPracticeLobbyCloseBroadcastChannel{}
}
func (m *CMsgPracticeLobbyCloseBroadcastChannel) String() string { return proto.CompactTextString(m) }
func (*CMsgPracticeLobbyCloseBroadcastChannel) ProtoMessage()    {}
func (*CMsgPracticeLobbyCloseBroadcastChannel) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{12}
}

func (m *CMsgPracticeLobbyCloseBroadcastChannel) GetChannel() uint32 {
	if m != nil && m.Channel != nil {
		return *m.Channel
	}
	return 0
}

type CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus) Reset() {
	*m = CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus{}
}
func (m *CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus) ProtoMessage() {}
func (*CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{13}
}

type CMsgPracticeLobbyKick struct {
	AccountId        *uint32 `protobuf:"varint,3,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgPracticeLobbyKick) Reset()                    { *m = CMsgPracticeLobbyKick{} }
func (m *CMsgPracticeLobbyKick) String() string            { return proto.CompactTextString(m) }
func (*CMsgPracticeLobbyKick) ProtoMessage()               {}
func (*CMsgPracticeLobbyKick) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{14} }

func (m *CMsgPracticeLobbyKick) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

type CMsgPracticeLobbyKickFromTeam struct {
	AccountId        *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgPracticeLobbyKickFromTeam) Reset()                    { *m = CMsgPracticeLobbyKickFromTeam{} }
func (m *CMsgPracticeLobbyKickFromTeam) String() string            { return proto.CompactTextString(m) }
func (*CMsgPracticeLobbyKickFromTeam) ProtoMessage()               {}
func (*CMsgPracticeLobbyKickFromTeam) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{15} }

func (m *CMsgPracticeLobbyKickFromTeam) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

type CMsgPracticeLobbyLeave struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMsgPracticeLobbyLeave) Reset()                    { *m = CMsgPracticeLobbyLeave{} }
func (m *CMsgPracticeLobbyLeave) String() string            { return proto.CompactTextString(m) }
func (*CMsgPracticeLobbyLeave) ProtoMessage()               {}
func (*CMsgPracticeLobbyLeave) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{16} }

type CMsgPracticeLobbyLaunch struct {
	ClientVersion    *uint32 `protobuf:"varint,5,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgPracticeLobbyLaunch) Reset()                    { *m = CMsgPracticeLobbyLaunch{} }
func (m *CMsgPracticeLobbyLaunch) String() string            { return proto.CompactTextString(m) }
func (*CMsgPracticeLobbyLaunch) ProtoMessage()               {}
func (*CMsgPracticeLobbyLaunch) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{17} }

func (m *CMsgPracticeLobbyLaunch) GetClientVersion() uint32 {
	if m != nil && m.ClientVersion != nil {
		return *m.ClientVersion
	}
	return 0
}

type CMsgApplyTeamToPracticeLobby struct {
	TeamId           *uint32 `protobuf:"varint,1,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgApplyTeamToPracticeLobby) Reset()                    { *m = CMsgApplyTeamToPracticeLobby{} }
func (m *CMsgApplyTeamToPracticeLobby) String() string            { return proto.CompactTextString(m) }
func (*CMsgApplyTeamToPracticeLobby) ProtoMessage()               {}
func (*CMsgApplyTeamToPracticeLobby) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{18} }

func (m *CMsgApplyTeamToPracticeLobby) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

type CMsgClearPracticeLobbyTeam struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMsgClearPracticeLobbyTeam) Reset()                    { *m = CMsgClearPracticeLobbyTeam{} }
func (m *CMsgClearPracticeLobbyTeam) String() string            { return proto.CompactTextString(m) }
func (*CMsgClearPracticeLobbyTeam) ProtoMessage()               {}
func (*CMsgClearPracticeLobbyTeam) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{19} }

type CMsgPracticeLobbyList struct {
	PassKey          *string        `protobuf:"bytes,2,opt,name=pass_key,json=passKey" json:"pass_key,omitempty"`
	Region           *uint32        `protobuf:"varint,3,opt,name=region" json:"region,omitempty"`
	GameMode         *DOTA_GameMode `protobuf:"varint,4,opt,name=game_mode,json=gameMode,enum=dota.DOTA_GameMode,def=0" json:"game_mode,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *CMsgPracticeLobbyList) Reset()                    { *m = CMsgPracticeLobbyList{} }
func (m *CMsgPracticeLobbyList) String() string            { return proto.CompactTextString(m) }
func (*CMsgPracticeLobbyList) ProtoMessage()               {}
func (*CMsgPracticeLobbyList) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{20} }

const Default_CMsgPracticeLobbyList_GameMode DOTA_GameMode = DOTA_GameMode_DOTA_GAMEMODE_NONE

func (m *CMsgPracticeLobbyList) GetPassKey() string {
	if m != nil && m.PassKey != nil {
		return *m.PassKey
	}
	return ""
}

func (m *CMsgPracticeLobbyList) GetRegion() uint32 {
	if m != nil && m.Region != nil {
		return *m.Region
	}
	return 0
}

func (m *CMsgPracticeLobbyList) GetGameMode() DOTA_GameMode {
	if m != nil && m.GameMode != nil {
		return *m.GameMode
	}
	return Default_CMsgPracticeLobbyList_GameMode
}

type CMsgPracticeLobbyListResponseEntry struct {
	Id                        *uint64                                            `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Members                   []*CMsgPracticeLobbyListResponseEntry_CLobbyMember `protobuf:"bytes,5,rep,name=members" json:"members,omitempty"`
	RequiresPassKey           *bool                                              `protobuf:"varint,6,opt,name=requires_pass_key,json=requiresPassKey" json:"requires_pass_key,omitempty"`
	LeaderAccountId           *uint32                                            `protobuf:"varint,7,opt,name=leader_account_id,json=leaderAccountId" json:"leader_account_id,omitempty"`
	GuildId                   *uint32                                            `protobuf:"varint,8,opt,name=guild_id,json=guildId" json:"guild_id,omitempty"`
	GuildLogo                 *uint64                                            `protobuf:"varint,9,opt,name=guild_logo,json=guildLogo" json:"guild_logo,omitempty"`
	Name                      *string                                            `protobuf:"bytes,10,opt,name=name" json:"name,omitempty"`
	CustomGameMode            *string                                            `protobuf:"bytes,11,opt,name=custom_game_mode,json=customGameMode" json:"custom_game_mode,omitempty"`
	GameMode                  *DOTA_GameMode                                     `protobuf:"varint,12,opt,name=game_mode,json=gameMode,enum=dota.DOTA_GameMode,def=0" json:"game_mode,omitempty"`
	FriendPresent             *bool                                              `protobuf:"varint,13,opt,name=friend_present,json=friendPresent" json:"friend_present,omitempty"`
	Players                   *uint32                                            `protobuf:"varint,14,opt,name=players" json:"players,omitempty"`
	CustomMapName             *string                                            `protobuf:"bytes,15,opt,name=custom_map_name,json=customMapName" json:"custom_map_name,omitempty"`
	MaxPlayerCount            *uint32                                            `protobuf:"varint,16,opt,name=max_player_count,json=maxPlayerCount" json:"max_player_count,omitempty"`
	ServerRegion              *uint32                                            `protobuf:"varint,17,opt,name=server_region,json=serverRegion" json:"server_region,omitempty"`
	LanHostPingToServerRegion *uint32                                            `protobuf:"varint,18,opt,name=lan_host_ping_to_server_region,json=lanHostPingToServerRegion" json:"lan_host_ping_to_server_region,omitempty"`
	LeagueId                  *uint32                                            `protobuf:"varint,19,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	XXX_unrecognized          []byte                                             `json:"-"`
}

func (m *CMsgPracticeLobbyListResponseEntry) Reset()         { *m = CMsgPracticeLobbyListResponseEntry{} }
func (m *CMsgPracticeLobbyListResponseEntry) String() string { return proto.CompactTextString(m) }
func (*CMsgPracticeLobbyListResponseEntry) ProtoMessage()    {}
func (*CMsgPracticeLobbyListResponseEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{21}
}

const Default_CMsgPracticeLobbyListResponseEntry_GameMode DOTA_GameMode = DOTA_GameMode_DOTA_GAMEMODE_NONE

func (m *CMsgPracticeLobbyListResponseEntry) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *CMsgPracticeLobbyListResponseEntry) GetMembers() []*CMsgPracticeLobbyListResponseEntry_CLobbyMember {
	if m != nil {
		return m.Members
	}
	return nil
}

func (m *CMsgPracticeLobbyListResponseEntry) GetRequiresPassKey() bool {
	if m != nil && m.RequiresPassKey != nil {
		return *m.RequiresPassKey
	}
	return false
}

func (m *CMsgPracticeLobbyListResponseEntry) GetLeaderAccountId() uint32 {
	if m != nil && m.LeaderAccountId != nil {
		return *m.LeaderAccountId
	}
	return 0
}

func (m *CMsgPracticeLobbyListResponseEntry) GetGuildId() uint32 {
	if m != nil && m.GuildId != nil {
		return *m.GuildId
	}
	return 0
}

func (m *CMsgPracticeLobbyListResponseEntry) GetGuildLogo() uint64 {
	if m != nil && m.GuildLogo != nil {
		return *m.GuildLogo
	}
	return 0
}

func (m *CMsgPracticeLobbyListResponseEntry) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *CMsgPracticeLobbyListResponseEntry) GetCustomGameMode() string {
	if m != nil && m.CustomGameMode != nil {
		return *m.CustomGameMode
	}
	return ""
}

func (m *CMsgPracticeLobbyListResponseEntry) GetGameMode() DOTA_GameMode {
	if m != nil && m.GameMode != nil {
		return *m.GameMode
	}
	return Default_CMsgPracticeLobbyListResponseEntry_GameMode
}

func (m *CMsgPracticeLobbyListResponseEntry) GetFriendPresent() bool {
	if m != nil && m.FriendPresent != nil {
		return *m.FriendPresent
	}
	return false
}

func (m *CMsgPracticeLobbyListResponseEntry) GetPlayers() uint32 {
	if m != nil && m.Players != nil {
		return *m.Players
	}
	return 0
}

func (m *CMsgPracticeLobbyListResponseEntry) GetCustomMapName() string {
	if m != nil && m.CustomMapName != nil {
		return *m.CustomMapName
	}
	return ""
}

func (m *CMsgPracticeLobbyListResponseEntry) GetMaxPlayerCount() uint32 {
	if m != nil && m.MaxPlayerCount != nil {
		return *m.MaxPlayerCount
	}
	return 0
}

func (m *CMsgPracticeLobbyListResponseEntry) GetServerRegion() uint32 {
	if m != nil && m.ServerRegion != nil {
		return *m.ServerRegion
	}
	return 0
}

func (m *CMsgPracticeLobbyListResponseEntry) GetLanHostPingToServerRegion() uint32 {
	if m != nil && m.LanHostPingToServerRegion != nil {
		return *m.LanHostPingToServerRegion
	}
	return 0
}

func (m *CMsgPracticeLobbyListResponseEntry) GetLeagueId() uint32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

type CMsgPracticeLobbyListResponseEntry_CLobbyMember struct {
	AccountId        *uint32 `protobuf:"varint,1,opt,name=account_id,json=accountId" json:"account_id,omitempty"`
	PlayerName       *string `protobuf:"bytes,2,opt,name=player_name,json=playerName" json:"player_name,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgPracticeLobbyListResponseEntry_CLobbyMember) Reset() {
	*m = CMsgPracticeLobbyListResponseEntry_CLobbyMember{}
}
func (m *CMsgPracticeLobbyListResponseEntry_CLobbyMember) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgPracticeLobbyListResponseEntry_CLobbyMember) ProtoMessage() {}
func (*CMsgPracticeLobbyListResponseEntry_CLobbyMember) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{21, 0}
}

func (m *CMsgPracticeLobbyListResponseEntry_CLobbyMember) GetAccountId() uint32 {
	if m != nil && m.AccountId != nil {
		return *m.AccountId
	}
	return 0
}

func (m *CMsgPracticeLobbyListResponseEntry_CLobbyMember) GetPlayerName() string {
	if m != nil && m.PlayerName != nil {
		return *m.PlayerName
	}
	return ""
}

type CMsgPracticeLobbyListResponse struct {
	Lobbies          []*CMsgPracticeLobbyListResponseEntry `protobuf:"bytes,2,rep,name=lobbies" json:"lobbies,omitempty"`
	XXX_unrecognized []byte                                `json:"-"`
}

func (m *CMsgPracticeLobbyListResponse) Reset()                    { *m = CMsgPracticeLobbyListResponse{} }
func (m *CMsgPracticeLobbyListResponse) String() string            { return proto.CompactTextString(m) }
func (*CMsgPracticeLobbyListResponse) ProtoMessage()               {}
func (*CMsgPracticeLobbyListResponse) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{22} }

func (m *CMsgPracticeLobbyListResponse) GetLobbies() []*CMsgPracticeLobbyListResponseEntry {
	if m != nil {
		return m.Lobbies
	}
	return nil
}

type CMsgLobbyList struct {
	ServerRegion     *uint32        `protobuf:"varint,1,opt,name=server_region,json=serverRegion,def=0" json:"server_region,omitempty"`
	GameMode         *DOTA_GameMode `protobuf:"varint,2,opt,name=game_mode,json=gameMode,enum=dota.DOTA_GameMode,def=0" json:"game_mode,omitempty"`
	XXX_unrecognized []byte         `json:"-"`
}

func (m *CMsgLobbyList) Reset()                    { *m = CMsgLobbyList{} }
func (m *CMsgLobbyList) String() string            { return proto.CompactTextString(m) }
func (*CMsgLobbyList) ProtoMessage()               {}
func (*CMsgLobbyList) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{23} }

const Default_CMsgLobbyList_ServerRegion uint32 = 0
const Default_CMsgLobbyList_GameMode DOTA_GameMode = DOTA_GameMode_DOTA_GAMEMODE_NONE

func (m *CMsgLobbyList) GetServerRegion() uint32 {
	if m != nil && m.ServerRegion != nil {
		return *m.ServerRegion
	}
	return Default_CMsgLobbyList_ServerRegion
}

func (m *CMsgLobbyList) GetGameMode() DOTA_GameMode {
	if m != nil && m.GameMode != nil {
		return *m.GameMode
	}
	return Default_CMsgLobbyList_GameMode
}

type CMsgLobbyListResponse struct {
	Lobbies          []*CMsgPracticeLobbyListResponseEntry `protobuf:"bytes,1,rep,name=lobbies" json:"lobbies,omitempty"`
	XXX_unrecognized []byte                                `json:"-"`
}

func (m *CMsgLobbyListResponse) Reset()                    { *m = CMsgLobbyListResponse{} }
func (m *CMsgLobbyListResponse) String() string            { return proto.CompactTextString(m) }
func (*CMsgLobbyListResponse) ProtoMessage()               {}
func (*CMsgLobbyListResponse) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{24} }

func (m *CMsgLobbyListResponse) GetLobbies() []*CMsgPracticeLobbyListResponseEntry {
	if m != nil {
		return m.Lobbies
	}
	return nil
}

type CMsgPracticeLobbyJoin struct {
	LobbyId             *uint64 `protobuf:"varint,1,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	ClientVersion       *uint32 `protobuf:"varint,2,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	PassKey             *string `protobuf:"bytes,3,opt,name=pass_key,json=passKey" json:"pass_key,omitempty"`
	CustomGameCrc       *uint64 `protobuf:"fixed64,4,opt,name=custom_game_crc,json=customGameCrc" json:"custom_game_crc,omitempty"`
	CustomGameTimestamp *uint32 `protobuf:"fixed32,5,opt,name=custom_game_timestamp,json=customGameTimestamp" json:"custom_game_timestamp,omitempty"`
	XXX_unrecognized    []byte  `json:"-"`
}

func (m *CMsgPracticeLobbyJoin) Reset()                    { *m = CMsgPracticeLobbyJoin{} }
func (m *CMsgPracticeLobbyJoin) String() string            { return proto.CompactTextString(m) }
func (*CMsgPracticeLobbyJoin) ProtoMessage()               {}
func (*CMsgPracticeLobbyJoin) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{25} }

func (m *CMsgPracticeLobbyJoin) GetLobbyId() uint64 {
	if m != nil && m.LobbyId != nil {
		return *m.LobbyId
	}
	return 0
}

func (m *CMsgPracticeLobbyJoin) GetClientVersion() uint32 {
	if m != nil && m.ClientVersion != nil {
		return *m.ClientVersion
	}
	return 0
}

func (m *CMsgPracticeLobbyJoin) GetPassKey() string {
	if m != nil && m.PassKey != nil {
		return *m.PassKey
	}
	return ""
}

func (m *CMsgPracticeLobbyJoin) GetCustomGameCrc() uint64 {
	if m != nil && m.CustomGameCrc != nil {
		return *m.CustomGameCrc
	}
	return 0
}

func (m *CMsgPracticeLobbyJoin) GetCustomGameTimestamp() uint32 {
	if m != nil && m.CustomGameTimestamp != nil {
		return *m.CustomGameTimestamp
	}
	return 0
}

type CMsgPracticeLobbyJoinResponse struct {
	Result           *DOTAJoinLobbyResult `protobuf:"varint,1,opt,name=result,enum=dota.DOTAJoinLobbyResult,def=0" json:"result,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *CMsgPracticeLobbyJoinResponse) Reset()                    { *m = CMsgPracticeLobbyJoinResponse{} }
func (m *CMsgPracticeLobbyJoinResponse) String() string            { return proto.CompactTextString(m) }
func (*CMsgPracticeLobbyJoinResponse) ProtoMessage()               {}
func (*CMsgPracticeLobbyJoinResponse) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{26} }

const Default_CMsgPracticeLobbyJoinResponse_Result DOTAJoinLobbyResult = DOTAJoinLobbyResult_DOTA_JOIN_RESULT_SUCCESS

func (m *CMsgPracticeLobbyJoinResponse) GetResult() DOTAJoinLobbyResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgPracticeLobbyJoinResponse_Result
}

type CMsgFriendPracticeLobbyListRequest struct {
	Friends          []uint32 `protobuf:"varint,1,rep,name=friends" json:"friends,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgFriendPracticeLobbyListRequest) Reset()         { *m = CMsgFriendPracticeLobbyListRequest{} }
func (m *CMsgFriendPracticeLobbyListRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgFriendPracticeLobbyListRequest) ProtoMessage()    {}
func (*CMsgFriendPracticeLobbyListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{27}
}

func (m *CMsgFriendPracticeLobbyListRequest) GetFriends() []uint32 {
	if m != nil {
		return m.Friends
	}
	return nil
}

type CMsgFriendPracticeLobbyListResponse struct {
	Lobbies          []*CMsgPracticeLobbyListResponseEntry `protobuf:"bytes,1,rep,name=lobbies" json:"lobbies,omitempty"`
	XXX_unrecognized []byte                                `json:"-"`
}

func (m *CMsgFriendPracticeLobbyListResponse) Reset()         { *m = CMsgFriendPracticeLobbyListResponse{} }
func (m *CMsgFriendPracticeLobbyListResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgFriendPracticeLobbyListResponse) ProtoMessage()    {}
func (*CMsgFriendPracticeLobbyListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{28}
}

func (m *CMsgFriendPracticeLobbyListResponse) GetLobbies() []*CMsgPracticeLobbyListResponseEntry {
	if m != nil {
		return m.Lobbies
	}
	return nil
}

type CMsgGuildmatePracticeLobbyListRequest struct {
	Guilds           []uint32 `protobuf:"varint,1,rep,name=guilds" json:"guilds,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgGuildmatePracticeLobbyListRequest) Reset()         { *m = CMsgGuildmatePracticeLobbyListRequest{} }
func (m *CMsgGuildmatePracticeLobbyListRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgGuildmatePracticeLobbyListRequest) ProtoMessage()    {}
func (*CMsgGuildmatePracticeLobbyListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{29}
}

func (m *CMsgGuildmatePracticeLobbyListRequest) GetGuilds() []uint32 {
	if m != nil {
		return m.Guilds
	}
	return nil
}

type CMsgGuildmatePracticeLobbyListResponse struct {
	Lobbies          []*CMsgPracticeLobbyListResponseEntry `protobuf:"bytes,1,rep,name=lobbies" json:"lobbies,omitempty"`
	XXX_unrecognized []byte                                `json:"-"`
}

func (m *CMsgGuildmatePracticeLobbyListResponse) Reset() {
	*m = CMsgGuildmatePracticeLobbyListResponse{}
}
func (m *CMsgGuildmatePracticeLobbyListResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgGuildmatePracticeLobbyListResponse) ProtoMessage()    {}
func (*CMsgGuildmatePracticeLobbyListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{30}
}

func (m *CMsgGuildmatePracticeLobbyListResponse) GetLobbies() []*CMsgPracticeLobbyListResponseEntry {
	if m != nil {
		return m.Lobbies
	}
	return nil
}

type CMsgJoinableCustomGameModesRequest struct {
	ServerRegion     *uint32 `protobuf:"varint,1,opt,name=server_region,json=serverRegion" json:"server_region,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgJoinableCustomGameModesRequest) Reset()         { *m = CMsgJoinableCustomGameModesRequest{} }
func (m *CMsgJoinableCustomGameModesRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgJoinableCustomGameModesRequest) ProtoMessage()    {}
func (*CMsgJoinableCustomGameModesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{31}
}

func (m *CMsgJoinableCustomGameModesRequest) GetServerRegion() uint32 {
	if m != nil && m.ServerRegion != nil {
		return *m.ServerRegion
	}
	return 0
}

type CMsgJoinableCustomGameModesResponseEntry struct {
	CustomGameId     *uint64 `protobuf:"varint,1,opt,name=custom_game_id,json=customGameId" json:"custom_game_id,omitempty"`
	LobbyCount       *uint32 `protobuf:"varint,2,opt,name=lobby_count,json=lobbyCount" json:"lobby_count,omitempty"`
	PlayerCount      *uint32 `protobuf:"varint,3,opt,name=player_count,json=playerCount" json:"player_count,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgJoinableCustomGameModesResponseEntry) Reset() {
	*m = CMsgJoinableCustomGameModesResponseEntry{}
}
func (m *CMsgJoinableCustomGameModesResponseEntry) String() string { return proto.CompactTextString(m) }
func (*CMsgJoinableCustomGameModesResponseEntry) ProtoMessage()    {}
func (*CMsgJoinableCustomGameModesResponseEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{32}
}

func (m *CMsgJoinableCustomGameModesResponseEntry) GetCustomGameId() uint64 {
	if m != nil && m.CustomGameId != nil {
		return *m.CustomGameId
	}
	return 0
}

func (m *CMsgJoinableCustomGameModesResponseEntry) GetLobbyCount() uint32 {
	if m != nil && m.LobbyCount != nil {
		return *m.LobbyCount
	}
	return 0
}

func (m *CMsgJoinableCustomGameModesResponseEntry) GetPlayerCount() uint32 {
	if m != nil && m.PlayerCount != nil {
		return *m.PlayerCount
	}
	return 0
}

type CMsgJoinableCustomGameModesResponse struct {
	GameModes        []*CMsgJoinableCustomGameModesResponseEntry `protobuf:"bytes,1,rep,name=game_modes,json=gameModes" json:"game_modes,omitempty"`
	XXX_unrecognized []byte                                      `json:"-"`
}

func (m *CMsgJoinableCustomGameModesResponse) Reset()         { *m = CMsgJoinableCustomGameModesResponse{} }
func (m *CMsgJoinableCustomGameModesResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgJoinableCustomGameModesResponse) ProtoMessage()    {}
func (*CMsgJoinableCustomGameModesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{33}
}

func (m *CMsgJoinableCustomGameModesResponse) GetGameModes() []*CMsgJoinableCustomGameModesResponseEntry {
	if m != nil {
		return m.GameModes
	}
	return nil
}

type CMsgJoinableCustomLobbiesRequest struct {
	ServerRegion     *uint32 `protobuf:"varint,1,opt,name=server_region,json=serverRegion" json:"server_region,omitempty"`
	CustomGameId     *uint64 `protobuf:"varint,2,opt,name=custom_game_id,json=customGameId" json:"custom_game_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgJoinableCustomLobbiesRequest) Reset()         { *m = CMsgJoinableCustomLobbiesRequest{} }
func (m *CMsgJoinableCustomLobbiesRequest) String() string { return proto.CompactTextString(m) }
func (*CMsgJoinableCustomLobbiesRequest) ProtoMessage()    {}
func (*CMsgJoinableCustomLobbiesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{34}
}

func (m *CMsgJoinableCustomLobbiesRequest) GetServerRegion() uint32 {
	if m != nil && m.ServerRegion != nil {
		return *m.ServerRegion
	}
	return 0
}

func (m *CMsgJoinableCustomLobbiesRequest) GetCustomGameId() uint64 {
	if m != nil && m.CustomGameId != nil {
		return *m.CustomGameId
	}
	return 0
}

type CMsgJoinableCustomLobbiesResponseEntry struct {
	LobbyId                   *uint64 `protobuf:"fixed64,1,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	CustomGameId              *uint64 `protobuf:"varint,2,opt,name=custom_game_id,json=customGameId" json:"custom_game_id,omitempty"`
	LobbyName                 *string `protobuf:"bytes,3,opt,name=lobby_name,json=lobbyName" json:"lobby_name,omitempty"`
	MemberCount               *uint32 `protobuf:"varint,4,opt,name=member_count,json=memberCount" json:"member_count,omitempty"`
	LeaderAccountId           *uint32 `protobuf:"varint,5,opt,name=leader_account_id,json=leaderAccountId" json:"leader_account_id,omitempty"`
	LeaderName                *string `protobuf:"bytes,6,opt,name=leader_name,json=leaderName" json:"leader_name,omitempty"`
	CustomMapName             *string `protobuf:"bytes,7,opt,name=custom_map_name,json=customMapName" json:"custom_map_name,omitempty"`
	MaxPlayerCount            *uint32 `protobuf:"varint,8,opt,name=max_player_count,json=maxPlayerCount" json:"max_player_count,omitempty"`
	ServerRegion              *uint32 `protobuf:"varint,9,opt,name=server_region,json=serverRegion" json:"server_region,omitempty"`
	LanHostPingToServerRegion *uint32 `protobuf:"varint,10,opt,name=lan_host_ping_to_server_region,json=lanHostPingToServerRegion" json:"lan_host_ping_to_server_region,omitempty"`
	HasPassKey                *bool   `protobuf:"varint,11,opt,name=has_pass_key,json=hasPassKey" json:"has_pass_key,omitempty"`
	XXX_unrecognized          []byte  `json:"-"`
}

func (m *CMsgJoinableCustomLobbiesResponseEntry) Reset() {
	*m = CMsgJoinableCustomLobbiesResponseEntry{}
}
func (m *CMsgJoinableCustomLobbiesResponseEntry) String() string { return proto.CompactTextString(m) }
func (*CMsgJoinableCustomLobbiesResponseEntry) ProtoMessage()    {}
func (*CMsgJoinableCustomLobbiesResponseEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{35}
}

func (m *CMsgJoinableCustomLobbiesResponseEntry) GetLobbyId() uint64 {
	if m != nil && m.LobbyId != nil {
		return *m.LobbyId
	}
	return 0
}

func (m *CMsgJoinableCustomLobbiesResponseEntry) GetCustomGameId() uint64 {
	if m != nil && m.CustomGameId != nil {
		return *m.CustomGameId
	}
	return 0
}

func (m *CMsgJoinableCustomLobbiesResponseEntry) GetLobbyName() string {
	if m != nil && m.LobbyName != nil {
		return *m.LobbyName
	}
	return ""
}

func (m *CMsgJoinableCustomLobbiesResponseEntry) GetMemberCount() uint32 {
	if m != nil && m.MemberCount != nil {
		return *m.MemberCount
	}
	return 0
}

func (m *CMsgJoinableCustomLobbiesResponseEntry) GetLeaderAccountId() uint32 {
	if m != nil && m.LeaderAccountId != nil {
		return *m.LeaderAccountId
	}
	return 0
}

func (m *CMsgJoinableCustomLobbiesResponseEntry) GetLeaderName() string {
	if m != nil && m.LeaderName != nil {
		return *m.LeaderName
	}
	return ""
}

func (m *CMsgJoinableCustomLobbiesResponseEntry) GetCustomMapName() string {
	if m != nil && m.CustomMapName != nil {
		return *m.CustomMapName
	}
	return ""
}

func (m *CMsgJoinableCustomLobbiesResponseEntry) GetMaxPlayerCount() uint32 {
	if m != nil && m.MaxPlayerCount != nil {
		return *m.MaxPlayerCount
	}
	return 0
}

func (m *CMsgJoinableCustomLobbiesResponseEntry) GetServerRegion() uint32 {
	if m != nil && m.ServerRegion != nil {
		return *m.ServerRegion
	}
	return 0
}

func (m *CMsgJoinableCustomLobbiesResponseEntry) GetLanHostPingToServerRegion() uint32 {
	if m != nil && m.LanHostPingToServerRegion != nil {
		return *m.LanHostPingToServerRegion
	}
	return 0
}

func (m *CMsgJoinableCustomLobbiesResponseEntry) GetHasPassKey() bool {
	if m != nil && m.HasPassKey != nil {
		return *m.HasPassKey
	}
	return false
}

type CMsgJoinableCustomLobbiesResponse struct {
	Lobbies          []*CMsgJoinableCustomLobbiesResponseEntry `protobuf:"bytes,1,rep,name=lobbies" json:"lobbies,omitempty"`
	XXX_unrecognized []byte                                    `json:"-"`
}

func (m *CMsgJoinableCustomLobbiesResponse) Reset()         { *m = CMsgJoinableCustomLobbiesResponse{} }
func (m *CMsgJoinableCustomLobbiesResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgJoinableCustomLobbiesResponse) ProtoMessage()    {}
func (*CMsgJoinableCustomLobbiesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{36}
}

func (m *CMsgJoinableCustomLobbiesResponse) GetLobbies() []*CMsgJoinableCustomLobbiesResponseEntry {
	if m != nil {
		return m.Lobbies
	}
	return nil
}

type CMsgQuickJoinCustomLobby struct {
	LegacyServerRegion *uint32                                      `protobuf:"varint,1,opt,name=legacy_server_region,json=legacyServerRegion" json:"legacy_server_region,omitempty"`
	CustomGameId       *uint64                                      `protobuf:"varint,2,opt,name=custom_game_id,json=customGameId" json:"custom_game_id,omitempty"`
	ClientVersion      *uint32                                      `protobuf:"varint,3,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	CreateLobbyDetails *CMsgPracticeLobbySetDetails                 `protobuf:"bytes,4,opt,name=create_lobby_details,json=createLobbyDetails" json:"create_lobby_details,omitempty"`
	AllowAnyMap        *bool                                        `protobuf:"varint,5,opt,name=allow_any_map,json=allowAnyMap" json:"allow_any_map,omitempty"`
	LegacyRegionPings  []*CMsgQuickJoinCustomLobby_LegacyRegionPing `protobuf:"bytes,6,rep,name=legacy_region_pings,json=legacyRegionPings" json:"legacy_region_pings,omitempty"`
	PingData           *CMsgClientPingData                          `protobuf:"bytes,7,opt,name=ping_data,json=pingData" json:"ping_data,omitempty"`
	XXX_unrecognized   []byte                                       `json:"-"`
}

func (m *CMsgQuickJoinCustomLobby) Reset()                    { *m = CMsgQuickJoinCustomLobby{} }
func (m *CMsgQuickJoinCustomLobby) String() string            { return proto.CompactTextString(m) }
func (*CMsgQuickJoinCustomLobby) ProtoMessage()               {}
func (*CMsgQuickJoinCustomLobby) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{37} }

func (m *CMsgQuickJoinCustomLobby) GetLegacyServerRegion() uint32 {
	if m != nil && m.LegacyServerRegion != nil {
		return *m.LegacyServerRegion
	}
	return 0
}

func (m *CMsgQuickJoinCustomLobby) GetCustomGameId() uint64 {
	if m != nil && m.CustomGameId != nil {
		return *m.CustomGameId
	}
	return 0
}

func (m *CMsgQuickJoinCustomLobby) GetClientVersion() uint32 {
	if m != nil && m.ClientVersion != nil {
		return *m.ClientVersion
	}
	return 0
}

func (m *CMsgQuickJoinCustomLobby) GetCreateLobbyDetails() *CMsgPracticeLobbySetDetails {
	if m != nil {
		return m.CreateLobbyDetails
	}
	return nil
}

func (m *CMsgQuickJoinCustomLobby) GetAllowAnyMap() bool {
	if m != nil && m.AllowAnyMap != nil {
		return *m.AllowAnyMap
	}
	return false
}

func (m *CMsgQuickJoinCustomLobby) GetLegacyRegionPings() []*CMsgQuickJoinCustomLobby_LegacyRegionPing {
	if m != nil {
		return m.LegacyRegionPings
	}
	return nil
}

func (m *CMsgQuickJoinCustomLobby) GetPingData() *CMsgClientPingData {
	if m != nil {
		return m.PingData
	}
	return nil
}

type CMsgQuickJoinCustomLobby_LegacyRegionPing struct {
	ServerRegion     *uint32 `protobuf:"varint,1,opt,name=server_region,json=serverRegion" json:"server_region,omitempty"`
	Ping             *uint32 `protobuf:"varint,2,opt,name=ping" json:"ping,omitempty"`
	RegionCode       *uint32 `protobuf:"fixed32,3,opt,name=region_code,json=regionCode" json:"region_code,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgQuickJoinCustomLobby_LegacyRegionPing) Reset() {
	*m = CMsgQuickJoinCustomLobby_LegacyRegionPing{}
}
func (m *CMsgQuickJoinCustomLobby_LegacyRegionPing) String() string { return proto.CompactTextString(m) }
func (*CMsgQuickJoinCustomLobby_LegacyRegionPing) ProtoMessage()    {}
func (*CMsgQuickJoinCustomLobby_LegacyRegionPing) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{37, 0}
}

func (m *CMsgQuickJoinCustomLobby_LegacyRegionPing) GetServerRegion() uint32 {
	if m != nil && m.ServerRegion != nil {
		return *m.ServerRegion
	}
	return 0
}

func (m *CMsgQuickJoinCustomLobby_LegacyRegionPing) GetPing() uint32 {
	if m != nil && m.Ping != nil {
		return *m.Ping
	}
	return 0
}

func (m *CMsgQuickJoinCustomLobby_LegacyRegionPing) GetRegionCode() uint32 {
	if m != nil && m.RegionCode != nil {
		return *m.RegionCode
	}
	return 0
}

type CMsgQuickJoinCustomLobbyResponse struct {
	Result           *DOTAJoinLobbyResult `protobuf:"varint,1,opt,name=result,enum=dota.DOTAJoinLobbyResult,def=0" json:"result,omitempty"`
	XXX_unrecognized []byte               `json:"-"`
}

func (m *CMsgQuickJoinCustomLobbyResponse) Reset()         { *m = CMsgQuickJoinCustomLobbyResponse{} }
func (m *CMsgQuickJoinCustomLobbyResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgQuickJoinCustomLobbyResponse) ProtoMessage()    {}
func (*CMsgQuickJoinCustomLobbyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{38}
}

const Default_CMsgQuickJoinCustomLobbyResponse_Result DOTAJoinLobbyResult = DOTAJoinLobbyResult_DOTA_JOIN_RESULT_SUCCESS

func (m *CMsgQuickJoinCustomLobbyResponse) GetResult() DOTAJoinLobbyResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgQuickJoinCustomLobbyResponse_Result
}

type CMsgBotGameCreate struct {
	SearchKey         *string            `protobuf:"bytes,1,opt,name=search_key,json=searchKey" json:"search_key,omitempty"`
	ClientVersion     *uint32            `protobuf:"varint,2,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	DifficultyRadiant *DOTABotDifficulty `protobuf:"varint,3,opt,name=difficulty_radiant,json=difficultyRadiant,enum=dota.DOTABotDifficulty,def=0" json:"difficulty_radiant,omitempty"`
	Team              *DOTA_GC_TEAM      `protobuf:"varint,4,opt,name=team,enum=dota.DOTA_GC_TEAM,def=0" json:"team,omitempty"`
	GameMode          *uint32            `protobuf:"varint,5,opt,name=game_mode,json=gameMode" json:"game_mode,omitempty"`
	DifficultyDire    *DOTABotDifficulty `protobuf:"varint,6,opt,name=difficulty_dire,json=difficultyDire,enum=dota.DOTABotDifficulty,def=0" json:"difficulty_dire,omitempty"`
	XXX_unrecognized  []byte             `json:"-"`
}

func (m *CMsgBotGameCreate) Reset()                    { *m = CMsgBotGameCreate{} }
func (m *CMsgBotGameCreate) String() string            { return proto.CompactTextString(m) }
func (*CMsgBotGameCreate) ProtoMessage()               {}
func (*CMsgBotGameCreate) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{39} }

const Default_CMsgBotGameCreate_DifficultyRadiant DOTABotDifficulty = DOTABotDifficulty_BOT_DIFFICULTY_PASSIVE
const Default_CMsgBotGameCreate_Team DOTA_GC_TEAM = DOTA_GC_TEAM_DOTA_GC_TEAM_GOOD_GUYS
const Default_CMsgBotGameCreate_DifficultyDire DOTABotDifficulty = DOTABotDifficulty_BOT_DIFFICULTY_PASSIVE

func (m *CMsgBotGameCreate) GetSearchKey() string {
	if m != nil && m.SearchKey != nil {
		return *m.SearchKey
	}
	return ""
}

func (m *CMsgBotGameCreate) GetClientVersion() uint32 {
	if m != nil && m.ClientVersion != nil {
		return *m.ClientVersion
	}
	return 0
}

func (m *CMsgBotGameCreate) GetDifficultyRadiant() DOTABotDifficulty {
	if m != nil && m.DifficultyRadiant != nil {
		return *m.DifficultyRadiant
	}
	return Default_CMsgBotGameCreate_DifficultyRadiant
}

func (m *CMsgBotGameCreate) GetTeam() DOTA_GC_TEAM {
	if m != nil && m.Team != nil {
		return *m.Team
	}
	return Default_CMsgBotGameCreate_Team
}

func (m *CMsgBotGameCreate) GetGameMode() uint32 {
	if m != nil && m.GameMode != nil {
		return *m.GameMode
	}
	return 0
}

func (m *CMsgBotGameCreate) GetDifficultyDire() DOTABotDifficulty {
	if m != nil && m.DifficultyDire != nil {
		return *m.DifficultyDire
	}
	return Default_CMsgBotGameCreate_DifficultyDire
}

type CMsgCustomGameCreate struct {
	SearchKey        *string `protobuf:"bytes,1,opt,name=search_key,json=searchKey" json:"search_key,omitempty"`
	ClientVersion    *uint32 `protobuf:"varint,2,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	Difficulty       *uint32 `protobuf:"varint,3,opt,name=difficulty" json:"difficulty,omitempty"`
	GameMode         *string `protobuf:"bytes,4,opt,name=game_mode,json=gameMode" json:"game_mode,omitempty"`
	Map              *string `protobuf:"bytes,5,opt,name=map" json:"map,omitempty"`
	CustomGameId     *uint64 `protobuf:"varint,7,opt,name=custom_game_id,json=customGameId" json:"custom_game_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgCustomGameCreate) Reset()                    { *m = CMsgCustomGameCreate{} }
func (m *CMsgCustomGameCreate) String() string            { return proto.CompactTextString(m) }
func (*CMsgCustomGameCreate) ProtoMessage()               {}
func (*CMsgCustomGameCreate) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{40} }

func (m *CMsgCustomGameCreate) GetSearchKey() string {
	if m != nil && m.SearchKey != nil {
		return *m.SearchKey
	}
	return ""
}

func (m *CMsgCustomGameCreate) GetClientVersion() uint32 {
	if m != nil && m.ClientVersion != nil {
		return *m.ClientVersion
	}
	return 0
}

func (m *CMsgCustomGameCreate) GetDifficulty() uint32 {
	if m != nil && m.Difficulty != nil {
		return *m.Difficulty
	}
	return 0
}

func (m *CMsgCustomGameCreate) GetGameMode() string {
	if m != nil && m.GameMode != nil {
		return *m.GameMode
	}
	return ""
}

func (m *CMsgCustomGameCreate) GetMap() string {
	if m != nil && m.Map != nil {
		return *m.Map
	}
	return ""
}

func (m *CMsgCustomGameCreate) GetCustomGameId() uint64 {
	if m != nil && m.CustomGameId != nil {
		return *m.CustomGameId
	}
	return 0
}

type CMsgEventGameCreate struct {
	SearchKey        *string `protobuf:"bytes,1,opt,name=search_key,json=searchKey" json:"search_key,omitempty"`
	ClientVersion    *uint32 `protobuf:"varint,2,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	Difficulty       *uint32 `protobuf:"varint,3,opt,name=difficulty" json:"difficulty,omitempty"`
	GameMode         *string `protobuf:"bytes,4,opt,name=game_mode,json=gameMode" json:"game_mode,omitempty"`
	Map              *string `protobuf:"bytes,5,opt,name=map" json:"map,omitempty"`
	CustomGameId     *uint64 `protobuf:"varint,7,opt,name=custom_game_id,json=customGameId" json:"custom_game_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgEventGameCreate) Reset()                    { *m = CMsgEventGameCreate{} }
func (m *CMsgEventGameCreate) String() string            { return proto.CompactTextString(m) }
func (*CMsgEventGameCreate) ProtoMessage()               {}
func (*CMsgEventGameCreate) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{41} }

func (m *CMsgEventGameCreate) GetSearchKey() string {
	if m != nil && m.SearchKey != nil {
		return *m.SearchKey
	}
	return ""
}

func (m *CMsgEventGameCreate) GetClientVersion() uint32 {
	if m != nil && m.ClientVersion != nil {
		return *m.ClientVersion
	}
	return 0
}

func (m *CMsgEventGameCreate) GetDifficulty() uint32 {
	if m != nil && m.Difficulty != nil {
		return *m.Difficulty
	}
	return 0
}

func (m *CMsgEventGameCreate) GetGameMode() string {
	if m != nil && m.GameMode != nil {
		return *m.GameMode
	}
	return ""
}

func (m *CMsgEventGameCreate) GetMap() string {
	if m != nil && m.Map != nil {
		return *m.Map
	}
	return ""
}

func (m *CMsgEventGameCreate) GetCustomGameId() uint64 {
	if m != nil && m.CustomGameId != nil {
		return *m.CustomGameId
	}
	return 0
}

type CMsgDOTAPartyMemberSetCoach struct {
	WantsCoach       *bool  `protobuf:"varint,1,opt,name=wants_coach,json=wantsCoach" json:"wants_coach,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMsgDOTAPartyMemberSetCoach) Reset()                    { *m = CMsgDOTAPartyMemberSetCoach{} }
func (m *CMsgDOTAPartyMemberSetCoach) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTAPartyMemberSetCoach) ProtoMessage()               {}
func (*CMsgDOTAPartyMemberSetCoach) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{42} }

func (m *CMsgDOTAPartyMemberSetCoach) GetWantsCoach() bool {
	if m != nil && m.WantsCoach != nil {
		return *m.WantsCoach
	}
	return false
}

type CMsgDOTASetGroupLeader struct {
	NewLeaderSteamid *uint64 `protobuf:"fixed64,1,opt,name=new_leader_steamid,json=newLeaderSteamid" json:"new_leader_steamid,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTASetGroupLeader) Reset()                    { *m = CMsgDOTASetGroupLeader{} }
func (m *CMsgDOTASetGroupLeader) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTASetGroupLeader) ProtoMessage()               {}
func (*CMsgDOTASetGroupLeader) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{43} }

func (m *CMsgDOTASetGroupLeader) GetNewLeaderSteamid() uint64 {
	if m != nil && m.NewLeaderSteamid != nil {
		return *m.NewLeaderSteamid
	}
	return 0
}

type CMsgDOTACancelGroupInvites struct {
	InvitedSteamids  []uint64 `protobuf:"fixed64,1,rep,name=invited_steamids,json=invitedSteamids" json:"invited_steamids,omitempty"`
	InvitedGroupids  []uint64 `protobuf:"fixed64,2,rep,name=invited_groupids,json=invitedGroupids" json:"invited_groupids,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *CMsgDOTACancelGroupInvites) Reset()                    { *m = CMsgDOTACancelGroupInvites{} }
func (m *CMsgDOTACancelGroupInvites) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTACancelGroupInvites) ProtoMessage()               {}
func (*CMsgDOTACancelGroupInvites) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{44} }

func (m *CMsgDOTACancelGroupInvites) GetInvitedSteamids() []uint64 {
	if m != nil {
		return m.InvitedSteamids
	}
	return nil
}

func (m *CMsgDOTACancelGroupInvites) GetInvitedGroupids() []uint64 {
	if m != nil {
		return m.InvitedGroupids
	}
	return nil
}

type CMsgDOTASetGroupOpenStatus struct {
	Open             *bool  `protobuf:"varint,1,opt,name=open" json:"open,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMsgDOTASetGroupOpenStatus) Reset()                    { *m = CMsgDOTASetGroupOpenStatus{} }
func (m *CMsgDOTASetGroupOpenStatus) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTASetGroupOpenStatus) ProtoMessage()               {}
func (*CMsgDOTASetGroupOpenStatus) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{45} }

func (m *CMsgDOTASetGroupOpenStatus) GetOpen() bool {
	if m != nil && m.Open != nil {
		return *m.Open
	}
	return false
}

type CMsgDOTAGroupMergeInvite struct {
	OtherGroupId     *uint64 `protobuf:"fixed64,1,opt,name=other_group_id,json=otherGroupId" json:"other_group_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAGroupMergeInvite) Reset()                    { *m = CMsgDOTAGroupMergeInvite{} }
func (m *CMsgDOTAGroupMergeInvite) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTAGroupMergeInvite) ProtoMessage()               {}
func (*CMsgDOTAGroupMergeInvite) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{46} }

func (m *CMsgDOTAGroupMergeInvite) GetOtherGroupId() uint64 {
	if m != nil && m.OtherGroupId != nil {
		return *m.OtherGroupId
	}
	return 0
}

type CMsgDOTAGroupMergeResponse struct {
	InitiatorGroupId *uint64 `protobuf:"fixed64,1,opt,name=initiator_group_id,json=initiatorGroupId" json:"initiator_group_id,omitempty"`
	Accept           *bool   `protobuf:"varint,2,opt,name=accept" json:"accept,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgDOTAGroupMergeResponse) Reset()                    { *m = CMsgDOTAGroupMergeResponse{} }
func (m *CMsgDOTAGroupMergeResponse) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTAGroupMergeResponse) ProtoMessage()               {}
func (*CMsgDOTAGroupMergeResponse) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{47} }

func (m *CMsgDOTAGroupMergeResponse) GetInitiatorGroupId() uint64 {
	if m != nil && m.InitiatorGroupId != nil {
		return *m.InitiatorGroupId
	}
	return 0
}

func (m *CMsgDOTAGroupMergeResponse) GetAccept() bool {
	if m != nil && m.Accept != nil {
		return *m.Accept
	}
	return false
}

type CMsgDOTAGroupMergeReply struct {
	Result           *EDOTAGroupMergeResult `protobuf:"varint,1,opt,name=result,enum=dota.EDOTAGroupMergeResult,def=0" json:"result,omitempty"`
	XXX_unrecognized []byte                 `json:"-"`
}

func (m *CMsgDOTAGroupMergeReply) Reset()                    { *m = CMsgDOTAGroupMergeReply{} }
func (m *CMsgDOTAGroupMergeReply) String() string            { return proto.CompactTextString(m) }
func (*CMsgDOTAGroupMergeReply) ProtoMessage()               {}
func (*CMsgDOTAGroupMergeReply) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{48} }

const Default_CMsgDOTAGroupMergeReply_Result EDOTAGroupMergeResult = EDOTAGroupMergeResult_k_EDOTAGroupMergeResult_OK

func (m *CMsgDOTAGroupMergeReply) GetResult() EDOTAGroupMergeResult {
	if m != nil && m.Result != nil {
		return *m.Result
	}
	return Default_CMsgDOTAGroupMergeReply_Result
}

type CMsgSpectatorLobbyGameDetails struct {
	Language         *uint32                             `protobuf:"varint,1,opt,name=language" json:"language,omitempty"`
	MatchId          *uint64                             `protobuf:"varint,2,opt,name=match_id,json=matchId" json:"match_id,omitempty"`
	ServerSteamId    *uint64                             `protobuf:"fixed64,3,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
	StreamUrl        *string                             `protobuf:"bytes,4,opt,name=stream_url,json=streamUrl" json:"stream_url,omitempty"`
	StreamName       *string                             `protobuf:"bytes,5,opt,name=stream_name,json=streamName" json:"stream_name,omitempty"`
	LeagueId         *uint32                             `protobuf:"varint,6,opt,name=league_id,json=leagueId" json:"league_id,omitempty"`
	SeriesType       *uint32                             `protobuf:"varint,7,opt,name=series_type,json=seriesType" json:"series_type,omitempty"`
	SeriesGame       *uint32                             `protobuf:"varint,8,opt,name=series_game,json=seriesGame" json:"series_game,omitempty"`
	RadiantTeam      *CMsgSpectatorLobbyGameDetails_Team `protobuf:"bytes,9,opt,name=radiant_team,json=radiantTeam" json:"radiant_team,omitempty"`
	DireTeam         *CMsgSpectatorLobbyGameDetails_Team `protobuf:"bytes,10,opt,name=dire_team,json=direTeam" json:"dire_team,omitempty"`
	XXX_unrecognized []byte                              `json:"-"`
}

func (m *CMsgSpectatorLobbyGameDetails) Reset()                    { *m = CMsgSpectatorLobbyGameDetails{} }
func (m *CMsgSpectatorLobbyGameDetails) String() string            { return proto.CompactTextString(m) }
func (*CMsgSpectatorLobbyGameDetails) ProtoMessage()               {}
func (*CMsgSpectatorLobbyGameDetails) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{49} }

func (m *CMsgSpectatorLobbyGameDetails) GetLanguage() uint32 {
	if m != nil && m.Language != nil {
		return *m.Language
	}
	return 0
}

func (m *CMsgSpectatorLobbyGameDetails) GetMatchId() uint64 {
	if m != nil && m.MatchId != nil {
		return *m.MatchId
	}
	return 0
}

func (m *CMsgSpectatorLobbyGameDetails) GetServerSteamId() uint64 {
	if m != nil && m.ServerSteamId != nil {
		return *m.ServerSteamId
	}
	return 0
}

func (m *CMsgSpectatorLobbyGameDetails) GetStreamUrl() string {
	if m != nil && m.StreamUrl != nil {
		return *m.StreamUrl
	}
	return ""
}

func (m *CMsgSpectatorLobbyGameDetails) GetStreamName() string {
	if m != nil && m.StreamName != nil {
		return *m.StreamName
	}
	return ""
}

func (m *CMsgSpectatorLobbyGameDetails) GetLeagueId() uint32 {
	if m != nil && m.LeagueId != nil {
		return *m.LeagueId
	}
	return 0
}

func (m *CMsgSpectatorLobbyGameDetails) GetSeriesType() uint32 {
	if m != nil && m.SeriesType != nil {
		return *m.SeriesType
	}
	return 0
}

func (m *CMsgSpectatorLobbyGameDetails) GetSeriesGame() uint32 {
	if m != nil && m.SeriesGame != nil {
		return *m.SeriesGame
	}
	return 0
}

func (m *CMsgSpectatorLobbyGameDetails) GetRadiantTeam() *CMsgSpectatorLobbyGameDetails_Team {
	if m != nil {
		return m.RadiantTeam
	}
	return nil
}

func (m *CMsgSpectatorLobbyGameDetails) GetDireTeam() *CMsgSpectatorLobbyGameDetails_Team {
	if m != nil {
		return m.DireTeam
	}
	return nil
}

type CMsgSpectatorLobbyGameDetails_Team struct {
	TeamId           *uint32 `protobuf:"varint,1,opt,name=team_id,json=teamId" json:"team_id,omitempty"`
	TeamName         *string `protobuf:"bytes,2,opt,name=team_name,json=teamName" json:"team_name,omitempty"`
	TeamLogo         *uint64 `protobuf:"fixed64,3,opt,name=team_logo,json=teamLogo" json:"team_logo,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgSpectatorLobbyGameDetails_Team) Reset()         { *m = CMsgSpectatorLobbyGameDetails_Team{} }
func (m *CMsgSpectatorLobbyGameDetails_Team) String() string { return proto.CompactTextString(m) }
func (*CMsgSpectatorLobbyGameDetails_Team) ProtoMessage()    {}
func (*CMsgSpectatorLobbyGameDetails_Team) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{49, 0}
}

func (m *CMsgSpectatorLobbyGameDetails_Team) GetTeamId() uint32 {
	if m != nil && m.TeamId != nil {
		return *m.TeamId
	}
	return 0
}

func (m *CMsgSpectatorLobbyGameDetails_Team) GetTeamName() string {
	if m != nil && m.TeamName != nil {
		return *m.TeamName
	}
	return ""
}

func (m *CMsgSpectatorLobbyGameDetails_Team) GetTeamLogo() uint64 {
	if m != nil && m.TeamLogo != nil {
		return *m.TeamLogo
	}
	return 0
}

type CMsgSetSpectatorLobbyDetails struct {
	LobbyId          *uint64                        `protobuf:"varint,1,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	LobbyName        *string                        `protobuf:"bytes,2,opt,name=lobby_name,json=lobbyName" json:"lobby_name,omitempty"`
	PassKey          *string                        `protobuf:"bytes,3,opt,name=pass_key,json=passKey" json:"pass_key,omitempty"`
	GameDetails      *CMsgSpectatorLobbyGameDetails `protobuf:"bytes,4,opt,name=game_details,json=gameDetails" json:"game_details,omitempty"`
	XXX_unrecognized []byte                         `json:"-"`
}

func (m *CMsgSetSpectatorLobbyDetails) Reset()                    { *m = CMsgSetSpectatorLobbyDetails{} }
func (m *CMsgSetSpectatorLobbyDetails) String() string            { return proto.CompactTextString(m) }
func (*CMsgSetSpectatorLobbyDetails) ProtoMessage()               {}
func (*CMsgSetSpectatorLobbyDetails) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{50} }

func (m *CMsgSetSpectatorLobbyDetails) GetLobbyId() uint64 {
	if m != nil && m.LobbyId != nil {
		return *m.LobbyId
	}
	return 0
}

func (m *CMsgSetSpectatorLobbyDetails) GetLobbyName() string {
	if m != nil && m.LobbyName != nil {
		return *m.LobbyName
	}
	return ""
}

func (m *CMsgSetSpectatorLobbyDetails) GetPassKey() string {
	if m != nil && m.PassKey != nil {
		return *m.PassKey
	}
	return ""
}

func (m *CMsgSetSpectatorLobbyDetails) GetGameDetails() *CMsgSpectatorLobbyGameDetails {
	if m != nil {
		return m.GameDetails
	}
	return nil
}

type CMsgCreateSpectatorLobby struct {
	ClientVersion    *uint32                       `protobuf:"varint,1,opt,name=client_version,json=clientVersion" json:"client_version,omitempty"`
	Details          *CMsgSetSpectatorLobbyDetails `protobuf:"bytes,2,opt,name=details" json:"details,omitempty"`
	XXX_unrecognized []byte                        `json:"-"`
}

func (m *CMsgCreateSpectatorLobby) Reset()                    { *m = CMsgCreateSpectatorLobby{} }
func (m *CMsgCreateSpectatorLobby) String() string            { return proto.CompactTextString(m) }
func (*CMsgCreateSpectatorLobby) ProtoMessage()               {}
func (*CMsgCreateSpectatorLobby) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{51} }

func (m *CMsgCreateSpectatorLobby) GetClientVersion() uint32 {
	if m != nil && m.ClientVersion != nil {
		return *m.ClientVersion
	}
	return 0
}

func (m *CMsgCreateSpectatorLobby) GetDetails() *CMsgSetSpectatorLobbyDetails {
	if m != nil {
		return m.Details
	}
	return nil
}

type CMsgSpectatorLobbyList struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMsgSpectatorLobbyList) Reset()                    { *m = CMsgSpectatorLobbyList{} }
func (m *CMsgSpectatorLobbyList) String() string            { return proto.CompactTextString(m) }
func (*CMsgSpectatorLobbyList) ProtoMessage()               {}
func (*CMsgSpectatorLobbyList) Descriptor() ([]byte, []int) { return fileDescriptor13, []int{52} }

type CMsgSpectatorLobbyListResponse struct {
	Lobbies          []*CMsgSpectatorLobbyListResponse_SpectatorLobby `protobuf:"bytes,1,rep,name=lobbies" json:"lobbies,omitempty"`
	XXX_unrecognized []byte                                           `json:"-"`
}

func (m *CMsgSpectatorLobbyListResponse) Reset()         { *m = CMsgSpectatorLobbyListResponse{} }
func (m *CMsgSpectatorLobbyListResponse) String() string { return proto.CompactTextString(m) }
func (*CMsgSpectatorLobbyListResponse) ProtoMessage()    {}
func (*CMsgSpectatorLobbyListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{53}
}

func (m *CMsgSpectatorLobbyListResponse) GetLobbies() []*CMsgSpectatorLobbyListResponse_SpectatorLobby {
	if m != nil {
		return m.Lobbies
	}
	return nil
}

type CMsgSpectatorLobbyListResponse_SpectatorLobby struct {
	LobbyId          *uint64                        `protobuf:"varint,1,opt,name=lobby_id,json=lobbyId" json:"lobby_id,omitempty"`
	GameName         *string                        `protobuf:"bytes,2,opt,name=game_name,json=gameName" json:"game_name,omitempty"`
	RequiresPassKey  *bool                          `protobuf:"varint,3,opt,name=requires_pass_key,json=requiresPassKey" json:"requires_pass_key,omitempty"`
	LeaderAccountId  *uint32                        `protobuf:"varint,4,opt,name=leader_account_id,json=leaderAccountId" json:"leader_account_id,omitempty"`
	MemberCount      *uint32                        `protobuf:"varint,5,opt,name=member_count,json=memberCount" json:"member_count,omitempty"`
	GameDetails      *CMsgSpectatorLobbyGameDetails `protobuf:"bytes,7,opt,name=game_details,json=gameDetails" json:"game_details,omitempty"`
	XXX_unrecognized []byte                         `json:"-"`
}

func (m *CMsgSpectatorLobbyListResponse_SpectatorLobby) Reset() {
	*m = CMsgSpectatorLobbyListResponse_SpectatorLobby{}
}
func (m *CMsgSpectatorLobbyListResponse_SpectatorLobby) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgSpectatorLobbyListResponse_SpectatorLobby) ProtoMessage() {}
func (*CMsgSpectatorLobbyListResponse_SpectatorLobby) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{53, 0}
}

func (m *CMsgSpectatorLobbyListResponse_SpectatorLobby) GetLobbyId() uint64 {
	if m != nil && m.LobbyId != nil {
		return *m.LobbyId
	}
	return 0
}

func (m *CMsgSpectatorLobbyListResponse_SpectatorLobby) GetGameName() string {
	if m != nil && m.GameName != nil {
		return *m.GameName
	}
	return ""
}

func (m *CMsgSpectatorLobbyListResponse_SpectatorLobby) GetRequiresPassKey() bool {
	if m != nil && m.RequiresPassKey != nil {
		return *m.RequiresPassKey
	}
	return false
}

func (m *CMsgSpectatorLobbyListResponse_SpectatorLobby) GetLeaderAccountId() uint32 {
	if m != nil && m.LeaderAccountId != nil {
		return *m.LeaderAccountId
	}
	return 0
}

func (m *CMsgSpectatorLobbyListResponse_SpectatorLobby) GetMemberCount() uint32 {
	if m != nil && m.MemberCount != nil {
		return *m.MemberCount
	}
	return 0
}

func (m *CMsgSpectatorLobbyListResponse_SpectatorLobby) GetGameDetails() *CMsgSpectatorLobbyGameDetails {
	if m != nil {
		return m.GameDetails
	}
	return nil
}

type CMsgClientToGCRequestSteamDatagramTicket struct {
	ServerSteamId    *uint64 `protobuf:"fixed64,1,opt,name=server_steam_id,json=serverSteamId" json:"server_steam_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgClientToGCRequestSteamDatagramTicket) Reset() {
	*m = CMsgClientToGCRequestSteamDatagramTicket{}
}
func (m *CMsgClientToGCRequestSteamDatagramTicket) String() string { return proto.CompactTextString(m) }
func (*CMsgClientToGCRequestSteamDatagramTicket) ProtoMessage()    {}
func (*CMsgClientToGCRequestSteamDatagramTicket) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{54}
}

func (m *CMsgClientToGCRequestSteamDatagramTicket) GetServerSteamId() uint64 {
	if m != nil && m.ServerSteamId != nil {
		return *m.ServerSteamId
	}
	return 0
}

type CMsgClientToGCRequestSteamDatagramTicketResponse struct {
	SerializedTicket []byte  `protobuf:"bytes,1,opt,name=serialized_ticket,json=serializedTicket" json:"serialized_ticket,omitempty"`
	Message          *string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *CMsgClientToGCRequestSteamDatagramTicketResponse) Reset() {
	*m = CMsgClientToGCRequestSteamDatagramTicketResponse{}
}
func (m *CMsgClientToGCRequestSteamDatagramTicketResponse) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgClientToGCRequestSteamDatagramTicketResponse) ProtoMessage() {}
func (*CMsgClientToGCRequestSteamDatagramTicketResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{55}
}

func (m *CMsgClientToGCRequestSteamDatagramTicketResponse) GetSerializedTicket() []byte {
	if m != nil {
		return m.SerializedTicket
	}
	return nil
}

func (m *CMsgClientToGCRequestSteamDatagramTicketResponse) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

type CMsgGCToClientSteamDatagramTicket struct {
	LegacyTimeExpiry         *uint32  `protobuf:"fixed32,1,opt,name=legacy_time_expiry,json=legacyTimeExpiry" json:"legacy_time_expiry,omitempty"`
	LegacyAuthorizedSteamId  *uint64  `protobuf:"fixed64,2,opt,name=legacy_authorized_steam_id,json=legacyAuthorizedSteamId" json:"legacy_authorized_steam_id,omitempty"`
	LegacyAuthorizedPublicIp *uint32  `protobuf:"fixed32,3,opt,name=legacy_authorized_public_ip,json=legacyAuthorizedPublicIp" json:"legacy_authorized_public_ip,omitempty"`
	LegacyGameserverSteamId  *uint64  `protobuf:"fixed64,4,opt,name=legacy_gameserver_steam_id,json=legacyGameserverSteamId" json:"legacy_gameserver_steam_id,omitempty"`
	LegacyGameserverNetId    *uint64  `protobuf:"fixed64,5,opt,name=legacy_gameserver_net_id,json=legacyGameserverNetId" json:"legacy_gameserver_net_id,omitempty"`
	LegacySignature          []byte   `protobuf:"bytes,6,opt,name=legacy_signature,json=legacySignature" json:"legacy_signature,omitempty"`
	LegacyAppId              *uint32  `protobuf:"varint,7,opt,name=legacy_app_id,json=legacyAppId" json:"legacy_app_id,omitempty"`
	LegacyExtraFields        [][]byte `protobuf:"bytes,8,rep,name=legacy_extra_fields,json=legacyExtraFields" json:"legacy_extra_fields,omitempty"`
	SerializedTicket         []byte   `protobuf:"bytes,16,opt,name=serialized_ticket,json=serializedTicket" json:"serialized_ticket,omitempty"`
	XXX_unrecognized         []byte   `json:"-"`
}

func (m *CMsgGCToClientSteamDatagramTicket) Reset()         { *m = CMsgGCToClientSteamDatagramTicket{} }
func (m *CMsgGCToClientSteamDatagramTicket) String() string { return proto.CompactTextString(m) }
func (*CMsgGCToClientSteamDatagramTicket) ProtoMessage()    {}
func (*CMsgGCToClientSteamDatagramTicket) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{56}
}

func (m *CMsgGCToClientSteamDatagramTicket) GetLegacyTimeExpiry() uint32 {
	if m != nil && m.LegacyTimeExpiry != nil {
		return *m.LegacyTimeExpiry
	}
	return 0
}

func (m *CMsgGCToClientSteamDatagramTicket) GetLegacyAuthorizedSteamId() uint64 {
	if m != nil && m.LegacyAuthorizedSteamId != nil {
		return *m.LegacyAuthorizedSteamId
	}
	return 0
}

func (m *CMsgGCToClientSteamDatagramTicket) GetLegacyAuthorizedPublicIp() uint32 {
	if m != nil && m.LegacyAuthorizedPublicIp != nil {
		return *m.LegacyAuthorizedPublicIp
	}
	return 0
}

func (m *CMsgGCToClientSteamDatagramTicket) GetLegacyGameserverSteamId() uint64 {
	if m != nil && m.LegacyGameserverSteamId != nil {
		return *m.LegacyGameserverSteamId
	}
	return 0
}

func (m *CMsgGCToClientSteamDatagramTicket) GetLegacyGameserverNetId() uint64 {
	if m != nil && m.LegacyGameserverNetId != nil {
		return *m.LegacyGameserverNetId
	}
	return 0
}

func (m *CMsgGCToClientSteamDatagramTicket) GetLegacySignature() []byte {
	if m != nil {
		return m.LegacySignature
	}
	return nil
}

func (m *CMsgGCToClientSteamDatagramTicket) GetLegacyAppId() uint32 {
	if m != nil && m.LegacyAppId != nil {
		return *m.LegacyAppId
	}
	return 0
}

func (m *CMsgGCToClientSteamDatagramTicket) GetLegacyExtraFields() [][]byte {
	if m != nil {
		return m.LegacyExtraFields
	}
	return nil
}

func (m *CMsgGCToClientSteamDatagramTicket) GetSerializedTicket() []byte {
	if m != nil {
		return m.SerializedTicket
	}
	return nil
}

type CMsgGCToClientRequestLaneSelection struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *CMsgGCToClientRequestLaneSelection) Reset()         { *m = CMsgGCToClientRequestLaneSelection{} }
func (m *CMsgGCToClientRequestLaneSelection) String() string { return proto.CompactTextString(m) }
func (*CMsgGCToClientRequestLaneSelection) ProtoMessage()    {}
func (*CMsgGCToClientRequestLaneSelection) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{57}
}

type CMsgGCToClientRequestLaneSelectionResponse struct {
	LaneSelectionFlags *uint32 `protobuf:"varint,1,opt,name=lane_selection_flags,json=laneSelectionFlags" json:"lane_selection_flags,omitempty"`
	XXX_unrecognized   []byte  `json:"-"`
}

func (m *CMsgGCToClientRequestLaneSelectionResponse) Reset() {
	*m = CMsgGCToClientRequestLaneSelectionResponse{}
}
func (m *CMsgGCToClientRequestLaneSelectionResponse) String() string {
	return proto.CompactTextString(m)
}
func (*CMsgGCToClientRequestLaneSelectionResponse) ProtoMessage() {}
func (*CMsgGCToClientRequestLaneSelectionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor13, []int{58}
}

func (m *CMsgGCToClientRequestLaneSelectionResponse) GetLaneSelectionFlags() uint32 {
	if m != nil && m.LaneSelectionFlags != nil {
		return *m.LaneSelectionFlags
	}
	return 0
}

func init() {
	proto.RegisterType((*CMsgStartFindingMatch)(nil), "dota.CMsgStartFindingMatch")
	proto.RegisterType((*CMsgStartFindingMatchResult)(nil), "dota.CMsgStartFindingMatchResult")
	proto.RegisterType((*CMsgStopFindingMatch)(nil), "dota.CMsgStopFindingMatch")
	proto.RegisterType((*CMsgPartyBuilderOptions)(nil), "dota.CMsgPartyBuilderOptions")
	proto.RegisterType((*CMsgReadyUp)(nil), "dota.CMsgReadyUp")
	proto.RegisterType((*CMsgReadyUpStatus)(nil), "dota.CMsgReadyUpStatus")
	proto.RegisterType((*CMsgAbandonCurrentGame)(nil), "dota.CMsgAbandonCurrentGame")
	proto.RegisterType((*CMsgPracticeLobbySetDetails)(nil), "dota.CMsgPracticeLobbySetDetails")
	proto.RegisterType((*CMsgPracticeLobbyCreate)(nil), "dota.CMsgPracticeLobbyCreate")
	proto.RegisterType((*CMsgPracticeLobbyCreate_SaveGame)(nil), "dota.CMsgPracticeLobbyCreate.SaveGame")
	proto.RegisterType((*CMsgPracticeLobbySetTeamSlot)(nil), "dota.CMsgPracticeLobbySetTeamSlot")
	proto.RegisterType((*CMsgPracticeLobbySetCoach)(nil), "dota.CMsgPracticeLobbySetCoach")
	proto.RegisterType((*CMsgPracticeLobbyJoinBroadcastChannel)(nil), "dota.CMsgPracticeLobbyJoinBroadcastChannel")
	proto.RegisterType((*CMsgPracticeLobbyCloseBroadcastChannel)(nil), "dota.CMsgPracticeLobbyCloseBroadcastChannel")
	proto.RegisterType((*CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus)(nil), "dota.CMsgPracticeLobbyToggleBroadcastChannelCameramanStatus")
	proto.RegisterType((*CMsgPracticeLobbyKick)(nil), "dota.CMsgPracticeLobbyKick")
	proto.RegisterType((*CMsgPracticeLobbyKickFromTeam)(nil), "dota.CMsgPracticeLobbyKickFromTeam")
	proto.RegisterType((*CMsgPracticeLobbyLeave)(nil), "dota.CMsgPracticeLobbyLeave")
	proto.RegisterType((*CMsgPracticeLobbyLaunch)(nil), "dota.CMsgPracticeLobbyLaunch")
	proto.RegisterType((*CMsgApplyTeamToPracticeLobby)(nil), "dota.CMsgApplyTeamToPracticeLobby")
	proto.RegisterType((*CMsgClearPracticeLobbyTeam)(nil), "dota.CMsgClearPracticeLobbyTeam")
	proto.RegisterType((*CMsgPracticeLobbyList)(nil), "dota.CMsgPracticeLobbyList")
	proto.RegisterType((*CMsgPracticeLobbyListResponseEntry)(nil), "dota.CMsgPracticeLobbyListResponseEntry")
	proto.RegisterType((*CMsgPracticeLobbyListResponseEntry_CLobbyMember)(nil), "dota.CMsgPracticeLobbyListResponseEntry.CLobbyMember")
	proto.RegisterType((*CMsgPracticeLobbyListResponse)(nil), "dota.CMsgPracticeLobbyListResponse")
	proto.RegisterType((*CMsgLobbyList)(nil), "dota.CMsgLobbyList")
	proto.RegisterType((*CMsgLobbyListResponse)(nil), "dota.CMsgLobbyListResponse")
	proto.RegisterType((*CMsgPracticeLobbyJoin)(nil), "dota.CMsgPracticeLobbyJoin")
	proto.RegisterType((*CMsgPracticeLobbyJoinResponse)(nil), "dota.CMsgPracticeLobbyJoinResponse")
	proto.RegisterType((*CMsgFriendPracticeLobbyListRequest)(nil), "dota.CMsgFriendPracticeLobbyListRequest")
	proto.RegisterType((*CMsgFriendPracticeLobbyListResponse)(nil), "dota.CMsgFriendPracticeLobbyListResponse")
	proto.RegisterType((*CMsgGuildmatePracticeLobbyListRequest)(nil), "dota.CMsgGuildmatePracticeLobbyListRequest")
	proto.RegisterType((*CMsgGuildmatePracticeLobbyListResponse)(nil), "dota.CMsgGuildmatePracticeLobbyListResponse")
	proto.RegisterType((*CMsgJoinableCustomGameModesRequest)(nil), "dota.CMsgJoinableCustomGameModesRequest")
	proto.RegisterType((*CMsgJoinableCustomGameModesResponseEntry)(nil), "dota.CMsgJoinableCustomGameModesResponseEntry")
	proto.RegisterType((*CMsgJoinableCustomGameModesResponse)(nil), "dota.CMsgJoinableCustomGameModesResponse")
	proto.RegisterType((*CMsgJoinableCustomLobbiesRequest)(nil), "dota.CMsgJoinableCustomLobbiesRequest")
	proto.RegisterType((*CMsgJoinableCustomLobbiesResponseEntry)(nil), "dota.CMsgJoinableCustomLobbiesResponseEntry")
	proto.RegisterType((*CMsgJoinableCustomLobbiesResponse)(nil), "dota.CMsgJoinableCustomLobbiesResponse")
	proto.RegisterType((*CMsgQuickJoinCustomLobby)(nil), "dota.CMsgQuickJoinCustomLobby")
	proto.RegisterType((*CMsgQuickJoinCustomLobby_LegacyRegionPing)(nil), "dota.CMsgQuickJoinCustomLobby.LegacyRegionPing")
	proto.RegisterType((*CMsgQuickJoinCustomLobbyResponse)(nil), "dota.CMsgQuickJoinCustomLobbyResponse")
	proto.RegisterType((*CMsgBotGameCreate)(nil), "dota.CMsgBotGameCreate")
	proto.RegisterType((*CMsgCustomGameCreate)(nil), "dota.CMsgCustomGameCreate")
	proto.RegisterType((*CMsgEventGameCreate)(nil), "dota.CMsgEventGameCreate")
	proto.RegisterType((*CMsgDOTAPartyMemberSetCoach)(nil), "dota.CMsgDOTAPartyMemberSetCoach")
	proto.RegisterType((*CMsgDOTASetGroupLeader)(nil), "dota.CMsgDOTASetGroupLeader")
	proto.RegisterType((*CMsgDOTACancelGroupInvites)(nil), "dota.CMsgDOTACancelGroupInvites")
	proto.RegisterType((*CMsgDOTASetGroupOpenStatus)(nil), "dota.CMsgDOTASetGroupOpenStatus")
	proto.RegisterType((*CMsgDOTAGroupMergeInvite)(nil), "dota.CMsgDOTAGroupMergeInvite")
	proto.RegisterType((*CMsgDOTAGroupMergeResponse)(nil), "dota.CMsgDOTAGroupMergeResponse")
	proto.RegisterType((*CMsgDOTAGroupMergeReply)(nil), "dota.CMsgDOTAGroupMergeReply")
	proto.RegisterType((*CMsgSpectatorLobbyGameDetails)(nil), "dota.CMsgSpectatorLobbyGameDetails")
	proto.RegisterType((*CMsgSpectatorLobbyGameDetails_Team)(nil), "dota.CMsgSpectatorLobbyGameDetails.Team")
	proto.RegisterType((*CMsgSetSpectatorLobbyDetails)(nil), "dota.CMsgSetSpectatorLobbyDetails")
	proto.RegisterType((*CMsgCreateSpectatorLobby)(nil), "dota.CMsgCreateSpectatorLobby")
	proto.RegisterType((*CMsgSpectatorLobbyList)(nil), "dota.CMsgSpectatorLobbyList")
	proto.RegisterType((*CMsgSpectatorLobbyListResponse)(nil), "dota.CMsgSpectatorLobbyListResponse")
	proto.RegisterType((*CMsgSpectatorLobbyListResponse_SpectatorLobby)(nil), "dota.CMsgSpectatorLobbyListResponse.SpectatorLobby")
	proto.RegisterType((*CMsgClientToGCRequestSteamDatagramTicket)(nil), "dota.CMsgClientToGCRequestSteamDatagramTicket")
	proto.RegisterType((*CMsgClientToGCRequestSteamDatagramTicketResponse)(nil), "dota.CMsgClientToGCRequestSteamDatagramTicketResponse")
	proto.RegisterType((*CMsgGCToClientSteamDatagramTicket)(nil), "dota.CMsgGCToClientSteamDatagramTicket")
	proto.RegisterType((*CMsgGCToClientRequestLaneSelection)(nil), "dota.CMsgGCToClientRequestLaneSelection")
	proto.RegisterType((*CMsgGCToClientRequestLaneSelectionResponse)(nil), "dota.CMsgGCToClientRequestLaneSelectionResponse")
	proto.RegisterEnum("dota.EStartFindingMatchResult", EStartFindingMatchResult_name, EStartFindingMatchResult_value)
}

func init() { proto.RegisterFile("dota_gcmessages_client_match_management.proto", fileDescriptor13) }

var fileDescriptor13 = []byte{
	// 4582 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x3a, 0x4b, 0x6f, 0x23, 0x47,
	0x7a, 0x4b, 0xbd, 0x28, 0x7e, 0xa4, 0x24, 0xaa, 0x46, 0xa3, 0xe9, 0xd1, 0x78, 0x66, 0x34, 0x3d,
	0xde, 0x89, 0x3c, 0x9e, 0x95, 0x6d, 0xf9, 0x4d, 0x3b, 0x5e, 0x53, 0x14, 0xa5, 0xe1, 0x0e, 0x25,
	0x6a, 0x9b, 0xd4, 0x38, 0xde, 0x05, 0xb6, 0x51, 0xea, 0x2e, 0x91, 0xb5, 0x6a, 0x76, 0xb7, 0xbb,
	0x9b, 0xd2, 0xd0, 0x40, 0xb0, 0x7b, 0x0d, 0x92, 0x43, 0x0e, 0x39, 0x04, 0x01, 0x72, 0xcd, 0x2f,
	0xc8, 0x2d, 0xd7, 0x00, 0x01, 0x72, 0xda, 0x00, 0xb9, 0xe5, 0x9a, 0x7b, 0x72, 0x0e, 0x10, 0x20,
	0xa8, 0xaf, 0xaa, 0xc9, 0x26, 0xd9, 0x92, 0x68, 0xc5, 0x39, 0xe4, 0xd6, 0xf5, 0x3d, 0xea, 0xf1,
	0xd5, 0xf7, 0xae, 0x86, 0x9f, 0xd9, 0x5e, 0x44, 0xcd, 0xb6, 0xd5, 0x65, 0x61, 0x48, 0xdb, 0x2c,
	0x34, 0x2d, 0x87, 0x33, 0x37, 0x32, 0xbb, 0x34, 0xb2, 0x3a, 0x66, 0x97, 0xba, 0xb4, 0xcd, 0xba,
	0xcc, 0x8d, 0xb6, 0xfd, 0xc0, 0x8b, 0x3c, 0x32, 0x27, 0xc8, 0x37, 0xee, 0x84, 0x11, 0xa3, 0xdd,
	0x98, 0x45, 0xa2, 0x36, 0xee, 0xe1, 0x4c, 0x61, 0x87, 0x06, 0xcc, 0x36, 0x99, 0xdb, 0xeb, 0x8e,
	0x22, 0xd4, 0xbc, 0x49, 0xc4, 0xdd, 0x53, 0x1a, 0xb2, 0xc4, 0xda, 0x0a, 0x3c, 0xb9, 0x25, 0xaf,
	0xdb, 0xf5, 0xdc, 0x2b, 0xb6, 0xa4, 0xff, 0xdb, 0x02, 0xdc, 0xad, 0x1c, 0x86, 0xed, 0x66, 0x44,
	0x83, 0x68, 0x9f, 0xbb, 0x36, 0x77, 0xdb, 0x87, 0x82, 0x94, 0x14, 0x61, 0xf6, 0x9c, 0xf5, 0xb5,
	0xcc, 0x66, 0x66, 0x2b, 0x67, 0x88, 0x4f, 0xf2, 0x02, 0xf2, 0x38, 0x4b, 0x3b, 0xf0, 0x7a, 0x7e,
	0xa8, 0xcd, 0x6c, 0x66, 0xb6, 0x96, 0x4a, 0xf0, 0xd1, 0xce, 0xe7, 0x1f, 0x7d, 0xfe, 0xc9, 0xa7,
	0x3b, 0x9f, 0x7f, 0x6c, 0x24, 0xd1, 0xe4, 0xa7, 0xb0, 0xac, 0x76, 0x7d, 0xc1, 0x82, 0x90, 0x7b,
	0xae, 0x36, 0x2b, 0x18, 0x8c, 0x25, 0x09, 0x7d, 0x2d, 0x81, 0xe4, 0x1d, 0x80, 0x36, 0xed, 0x32,
	0xb3, 0xeb, 0xd9, 0x2c, 0xd4, 0xe6, 0x26, 0xe6, 0xcc, 0x09, 0xec, 0xa1, 0x40, 0x92, 0x26, 0x2c,
	0x9f, 0x7a, 0x91, 0x69, 0xf3, 0xb3, 0x33, 0x6e, 0xf5, 0x9c, 0xa8, 0xaf, 0xcd, 0x6f, 0x66, 0xb6,
	0x96, 0x77, 0xee, 0x6d, 0x8b, 0x33, 0x6f, 0xef, 0x35, 0x5a, 0xe5, 0x5d, 0x2f, 0xda, 0x1b, 0xa0,
	0x4b, 0x77, 0x76, 0x1b, 0x2d, 0x73, 0xaf, 0xb6, 0xbf, 0x5f, 0xab, 0x9c, 0xd4, 0x5b, 0xdf, 0x9a,
	0x2f, 0xcb, 0xc6, 0x9e, 0xb1, 0x74, 0x9a, 0xa4, 0x21, 0x65, 0x00, 0x29, 0x9a, 0xa8, 0xef, 0x33,
	0x6d, 0x01, 0x27, 0x5c, 0x91, 0x13, 0xa2, 0x1c, 0x5a, 0x7d, 0x9f, 0x95, 0x56, 0x0f, 0xcb, 0xad,
	0xca, 0x4b, 0xb3, 0xf5, 0xed, 0x71, 0xd5, 0xac, 0x94, 0x9b, 0x27, 0xe5, 0xba, 0x91, 0xeb, 0xc6,
	0x58, 0xb2, 0x03, 0xcb, 0x38, 0x70, 0xa8, 0xdb, 0xee, 0x09, 0x99, 0x6b, 0xd9, 0x89, 0x63, 0x8c,
	0x51, 0x90, 0x7b, 0x90, 0x15, 0x5a, 0x60, 0x72, 0x5b, 0x5b, 0x44, 0xb1, 0x2c, 0x88, 0x61, 0xcd,
	0x26, 0xbf, 0x02, 0x82, 0xf2, 0x88, 0x49, 0xf1, 0xce, 0x35, 0xc0, 0x7d, 0xad, 0x25, 0xf6, 0x55,
	0x8f, 0xa7, 0x2a, 0xad, 0xcb, 0xcd, 0xd5, 0xcb, 0x47, 0x07, 0x27, 0xe5, 0x83, 0xaa, 0x59, 0x3b,
	0x7a, 0x5d, 0xae, 0xd7, 0xf6, 0x8c, 0xa2, 0x98, 0x27, 0x26, 0xab, 0xba, 0xbd, 0x2e, 0x79, 0x31,
	0x3e, 0xb7, 0x4b, 0xbb, 0x4c, 0xcb, 0xe3, 0x0d, 0x8f, 0x50, 0x1f, 0xd1, 0x2e, 0x23, 0x1f, 0x43,
	0xce, 0xe7, 0x6e, 0xdb, 0xb4, 0x69, 0x44, 0xb5, 0xc2, 0x66, 0x66, 0x2b, 0xbf, 0xa3, 0xc9, 0x0d,
	0x08, 0x85, 0xa9, 0xe0, 0x2d, 0x1e, 0x73, 0xb7, 0xbd, 0x47, 0x23, 0x6a, 0x2c, 0xfa, 0xea, 0x8b,
	0x6c, 0xc3, 0x9d, 0x80, 0xb5, 0xb9, 0xe7, 0x9a, 0x21, 0x73, 0x98, 0x15, 0x99, 0x67, 0x0e, 0x6d,
	0x87, 0xda, 0x12, 0x9e, 0x72, 0x55, 0xa2, 0x9a, 0x88, 0xd9, 0x17, 0x08, 0xf2, 0x10, 0x20, 0xf4,
	0x1c, 0xcf, 0xfc, 0xae, 0xc7, 0x7a, 0x4c, 0x5b, 0xde, 0xcc, 0x6c, 0x2d, 0x1a, 0x39, 0x01, 0xf9,
	0xa5, 0x00, 0x90, 0x2d, 0x28, 0x8a, 0x4b, 0x0f, 0xad, 0x80, 0xfb, 0x91, 0xc9, 0x5d, 0x9b, 0xbd,
	0xd1, 0x56, 0x70, 0x2e, 0xa1, 0x0c, 0x4d, 0x04, 0xd7, 0x04, 0x94, 0x7c, 0x00, 0x77, 0xd1, 0xb2,
	0x4c, 0xcb, 0xa1, 0xae, 0x49, 0x2d, 0xcb, 0xeb, 0xb9, 0x91, 0x10, 0x70, 0x11, 0xc9, 0x09, 0x22,
	0x2b, 0x0e, 0x75, 0xcb, 0x12, 0x55, 0xb3, 0x85, 0x40, 0x78, 0x68, 0x5a, 0x1d, 0xea, 0x38, 0xcc,
	0x6d, 0x33, 0x69, 0x24, 0xda, 0x2a, 0xee, 0xa1, 0xc8, 0xc3, 0x4a, 0x8c, 0x90, 0x16, 0xf1, 0x3e,
	0xac, 0x39, 0xd4, 0x65, 0xea, 0x5c, 0xe2, 0x84, 0xf2, 0x68, 0x44, 0xce, 0x2f, 0x70, 0xcd, 0x18,
	0x85, 0x67, 0xd3, 0xff, 0x7e, 0x06, 0x1e, 0xa4, 0x5a, 0x97, 0xc1, 0xc2, 0x9e, 0x13, 0x91, 0x4f,
	0x61, 0xdd, 0x61, 0x6d, 0x6a, 0xf5, 0xcd, 0x36, 0x73, 0x59, 0xc0, 0x2d, 0x93, 0x05, 0x88, 0x41,
	0xb3, 0x5b, 0x2a, 0x65, 0x76, 0x8c, 0x35, 0x49, 0x70, 0x20, 0xf1, 0x55, 0x89, 0x26, 0xbf, 0x82,
	0x05, 0x45, 0x38, 0x83, 0x9a, 0xf1, 0x48, 0x5e, 0x4c, 0xf5, 0x8a, 0x85, 0x4a, 0xfa, 0xb9, 0x79,
	0x15, 0xce, 0xac, 0xb9, 0x17, 0xd4, 0xe1, 0xb6, 0xa1, 0x66, 0x24, 0x8f, 0x21, 0xcf, 0x82, 0xc0,
	0x0b, 0xcc, 0xc8, 0x3b, 0x67, 0xd2, 0x6a, 0x73, 0x06, 0x20, 0xa8, 0x25, 0x20, 0xe4, 0x29, 0x2c,
	0xd9, 0xec, 0xb4, 0xd7, 0x36, 0x95, 0x8f, 0x41, 0xab, 0xcd, 0x19, 0x05, 0x04, 0x1e, 0x4a, 0x18,
	0x29, 0xc1, 0xfd, 0x80, 0x85, 0xbe, 0xe7, 0x86, 0xfc, 0xd4, 0x61, 0xa6, 0x4f, 0x83, 0xa8, 0x6f,
	0x76, 0x59, 0xf7, 0x94, 0x05, 0xa1, 0x36, 0xbf, 0x39, 0xbb, 0xb5, 0x60, 0xdc, 0x4b, 0x10, 0x1c,
	0x0b, 0xfc, 0xa1, 0x44, 0xeb, 0xeb, 0xb0, 0x26, 0xa5, 0xe6, 0xf9, 0xc9, 0xfd, 0xea, 0x7f, 0x33,
	0x03, 0xf7, 0x04, 0x02, 0x89, 0x77, 0x7b, 0xdc, 0xb1, 0x59, 0xd0, 0xf0, 0x85, 0xb8, 0x43, 0xf2,
	0x0e, 0x14, 0xa9, 0x6d, 0x73, 0x31, 0xa0, 0x8e, 0x19, 0x3a, 0x5e, 0x14, 0x4a, 0x21, 0x1a, 0x2b,
	0x43, 0x78, 0x53, 0x80, 0xc7, 0x4c, 0x7e, 0xe6, 0x36, 0x26, 0xbf, 0x39, 0xea, 0x0a, 0xa5, 0x67,
	0xbb, 0xc1, 0xfd, 0xcd, 0xa5, 0xb9, 0xbf, 0x97, 0xb0, 0x18, 0x5b, 0xa3, 0xf2, 0x66, 0x3f, 0xcc,
	0xc8, 0x07, 0xdc, 0xfa, 0x3f, 0x65, 0x20, 0x2f, 0x84, 0x63, 0x30, 0x6a, 0xf7, 0x4f, 0x7c, 0xd2,
	0x80, 0xf9, 0x30, 0xa2, 0x11, 0x43, 0x29, 0x2c, 0xef, 0xdc, 0x1f, 0x3a, 0xc9, 0xba, 0x77, 0x7a,
	0xda, 0x47, 0xb2, 0xa6, 0x20, 0x28, 0x3d, 0x4a, 0x01, 0x9a, 0x27, 0x47, 0x7b, 0xd5, 0x4a, 0xbd,
	0x6c, 0x54, 0xf7, 0x0c, 0x39, 0x0f, 0xd9, 0x84, 0x42, 0x20, 0xf0, 0x66, 0xcf, 0x37, 0x45, 0x64,
	0x10, 0x82, 0x5b, 0x30, 0x20, 0x90, 0xeb, 0xbd, 0x62, 0x7d, 0x52, 0x85, 0xe5, 0x0e, 0x0d, 0xec,
	0x4b, 0x1a, 0x30, 0x33, 0xf4, 0x99, 0x25, 0x05, 0x93, 0x8f, 0xb5, 0xb3, 0x22, 0xd6, 0x91, 0x7e,
	0xe3, 0xa5, 0x22, 0x6b, 0x0a, 0x2a, 0x63, 0xa9, 0x93, 0x1c, 0xea, 0x11, 0xac, 0x26, 0x0e, 0x22,
	0xb6, 0xd3, 0x0b, 0xc9, 0x7d, 0x58, 0x74, 0xc4, 0x16, 0x85, 0x41, 0x67, 0x70, 0xe5, 0x2c, 0x8e,
	0x6b, 0x36, 0x79, 0x02, 0x05, 0x6a, 0x59, 0xcc, 0x8f, 0x98, 0x6d, 0x72, 0x5b, 0x04, 0xa6, 0x59,
	0x71, 0x1b, 0x31, 0xac, 0x66, 0x87, 0x82, 0xc4, 0x66, 0x96, 0xc3, 0x5d, 0x45, 0x32, 0x2b, 0x49,
	0x62, 0x58, 0xcd, 0x0e, 0x75, 0x0d, 0xd6, 0xc5, 0xaa, 0xe5, 0x53, 0xea, 0xda, 0x9e, 0x5b, 0xe9,
	0x05, 0x01, 0x73, 0xa3, 0x03, 0xda, 0x65, 0xfa, 0x3f, 0x16, 0xa5, 0x15, 0x1f, 0x07, 0xd4, 0x8a,
	0xb8, 0xc5, 0x50, 0x54, 0x4d, 0x16, 0xed, 0xb1, 0x88, 0x72, 0x67, 0x72, 0x6b, 0x73, 0xc3, 0xad,
	0x3d, 0x00, 0x8c, 0x5f, 0xd2, 0xd1, 0xce, 0xa0, 0x99, 0x2c, 0x0a, 0x00, 0x3a, 0xd8, 0x12, 0x14,
	0xd0, 0x5f, 0xd9, 0x72, 0x1e, 0xdc, 0x54, 0x3e, 0x8e, 0x66, 0x15, 0x5c, 0xa5, 0xc5, 0x68, 0x57,
	0x2d, 0x63, 0xe4, 0xa3, 0xe1, 0x40, 0xd8, 0x60, 0xc8, 0x82, 0x0b, 0x16, 0x98, 0xd2, 0xa3, 0x2a,
	0xed, 0x2a, 0x48, 0xa0, 0x81, 0xb0, 0xc1, 0xea, 0x22, 0xb6, 0xa2, 0x76, 0x2d, 0xc9, 0xd5, 0x45,
	0x38, 0x25, 0x5f, 0x40, 0xd6, 0xea, 0x9a, 0x3e, 0xb7, 0xce, 0x55, 0xd4, 0x23, 0x43, 0x0d, 0x31,
	0x2b, 0x87, 0xe6, 0x71, 0xad, 0xf2, 0xaa, 0xb4, 0x1c, 0x8f, 0x8c, 0xf2, 0xd1, 0x5e, 0xe3, 0xd0,
	0x58, 0xb0, 0xba, 0xc7, 0xdc, 0x3a, 0x27, 0x0c, 0xd6, 0x47, 0x43, 0xb1, 0x19, 0x50, 0x9b, 0x53,
	0x37, 0xd2, 0x72, 0xd7, 0x87, 0xe4, 0xf5, 0xb1, 0x90, 0x7c, 0x5c, 0x6e, 0x36, 0x6b, 0xaf, 0xab,
	0xc6, 0xda, 0x48, 0x54, 0x36, 0xe4, 0x64, 0x78, 0xb3, 0x8e, 0xe3, 0x5d, 0x9a, 0x56, 0x87, 0xd1,
	0x28, 0xc4, 0x30, 0xb8, 0x68, 0xe4, 0x11, 0x56, 0x41, 0x10, 0x79, 0x1b, 0x96, 0xcf, 0xb8, 0xe3,
	0x98, 0x97, 0x3c, 0xea, 0x98, 0xa7, 0xc2, 0xea, 0xf3, 0x48, 0x54, 0x10, 0xd0, 0x6f, 0x78, 0xd4,
	0xd9, 0x15, 0x26, 0xff, 0x10, 0x80, 0xbb, 0x51, 0xe0, 0x49, 0x51, 0x14, 0x64, 0x90, 0x41, 0x08,
	0xca, 0x42, 0x38, 0x0f, 0x5c, 0x47, 0x68, 0x6d, 0x44, 0x23, 0xee, 0xb6, 0x31, 0x60, 0x2d, 0x1a,
	0x2b, 0x08, 0x6f, 0x0e, 0xc0, 0xe4, 0x08, 0x0a, 0x28, 0xd3, 0xd8, 0xaa, 0x97, 0xf1, 0xbc, 0x77,
	0x87, 0xe7, 0x15, 0x2a, 0xa3, 0xac, 0xbb, 0xb4, 0x76, 0x50, 0x3e, 0xac, 0x9a, 0xaf, 0xab, 0x46,
	0xb3, 0xd6, 0x38, 0x32, 0x2b, 0x27, 0x86, 0x51, 0x3d, 0x6a, 0x19, 0xf9, 0xf6, 0x90, 0x44, 0x28,
	0x8f, 0x4f, 0xc3, 0x10, 0x2d, 0x6a, 0x05, 0x15, 0x24, 0x2b, 0xc6, 0xc2, 0x9c, 0x36, 0x60, 0xd1,
	0x61, 0xb4, 0xdd, 0x63, 0x83, 0x18, 0x36, 0x18, 0x93, 0x1d, 0xb8, 0xeb, 0x33, 0x97, 0x0a, 0xc9,
	0x3b, 0xec, 0x82, 0x39, 0x03, 0xf9, 0xaf, 0x22, 0xe1, 0x1d, 0x85, 0xac, 0x0b, 0x5c, 0x2c, 0xcd,
	0x17, 0x40, 0x46, 0x79, 0x6c, 0x1e, 0x30, 0x15, 0xbd, 0x8a, 0x49, 0x86, 0x3d, 0x1e, 0xa0, 0xb9,
	0x3b, 0x1e, 0xb5, 0x4d, 0x3c, 0x2d, 0xb7, 0xb5, 0x3b, 0x48, 0x07, 0x02, 0x26, 0x8e, 0x58, 0xb3,
	0x45, 0xa0, 0x08, 0x59, 0xc0, 0x59, 0x28, 0x1d, 0xe9, 0x9a, 0x24, 0x90, 0x20, 0xf4, 0x92, 0x22,
	0x15, 0x90, 0x6b, 0x9b, 0x8a, 0xf0, 0x92, 0xbb, 0xa1, 0x76, 0x57, 0xa5, 0x02, 0x12, 0xd5, 0x44,
	0xcc, 0x37, 0xdc, 0x0d, 0x45, 0xac, 0x17, 0x5b, 0x1a, 0x21, 0x5e, 0x97, 0xb1, 0x5e, 0xc0, 0x13,
	0x94, 0x8f, 0x21, 0x4b, 0x1d, 0xc7, 0xea, 0xd0, 0x48, 0xbb, 0x27, 0xee, 0xa9, 0x34, 0x7f, 0x46,
	0x9d, 0x90, 0x19, 0x31, 0x94, 0xbc, 0x82, 0x25, 0x4c, 0x84, 0xa3, 0x0b, 0xd3, 0x66, 0x0e, 0xed,
	0x6b, 0x1a, 0xde, 0xd3, 0xba, 0xbc, 0x27, 0xb4, 0xad, 0x3d, 0x2f, 0xa2, 0xad, 0xd7, 0x7b, 0x02,
	0x5b, 0x5a, 0x49, 0x40, 0xcc, 0x0f, 0x76, 0xde, 0x37, 0xf2, 0x82, 0xae, 0x75, 0x81, 0x58, 0x91,
	0x0a, 0x3b, 0xd4, 0xd5, 0xee, 0xa3, 0x46, 0x88, 0x4f, 0xb1, 0x53, 0xab, 0x17, 0x46, 0x5e, 0xd7,
	0x1c, 0x1a, 0xd8, 0x06, 0xde, 0xde, 0xb2, 0x84, 0x1f, 0xc4, 0x66, 0xf6, 0x0c, 0x56, 0x14, 0x65,
	0x97, 0xfa, 0xd2, 0x0f, 0x3c, 0x40, 0xc2, 0x25, 0x09, 0x3e, 0xa4, 0x3e, 0x3a, 0x83, 0x77, 0x61,
	0x55, 0xd1, 0x25, 0xf2, 0xdb, 0xb7, 0xe4, 0xdd, 0x48, 0x44, 0x22, 0x69, 0x7d, 0x1b, 0x96, 0x93,
	0xcb, 0x73, 0x5b, 0x7b, 0x88, 0x7e, 0xa7, 0x30, 0x5c, 0x5c, 0x66, 0x37, 0xf1, 0xd2, 0xdc, 0x35,
	0x7d, 0x87, 0xf6, 0x45, 0xec, 0x7d, 0x94, 0x9c, 0xf3, 0x90, 0xbb, 0xc7, 0x12, 0x9e, 0xa4, 0xa6,
	0x6f, 0x06, 0xd4, 0x8f, 0x47, 0xa8, 0xe9, 0x9b, 0x98, 0xba, 0x0c, 0x8f, 0x44, 0x96, 0xd5, 0xf1,
	0xc2, 0xc8, 0xc4, 0x2c, 0x31, 0xf2, 0xcc, 0x51, 0x87, 0xb4, 0x89, 0x9c, 0xf7, 0x1d, 0xea, 0xbe,
	0xf4, 0x42, 0x4c, 0x14, 0x5b, 0x5e, 0x33, 0xe9, 0x9d, 0x4e, 0x00, 0x2e, 0x78, 0xc8, 0x4f, 0xb9,
	0xc3, 0xa3, 0xbe, 0xf6, 0x24, 0x35, 0x4a, 0xbd, 0x1e, 0x10, 0x94, 0x36, 0x52, 0x80, 0xe6, 0x71,
	0xef, 0xd4, 0xe1, 0x96, 0x91, 0x98, 0x28, 0x21, 0x70, 0x94, 0x8d, 0x15, 0x58, 0x9a, 0x8e, 0xf1,
	0x62, 0x69, 0x28, 0x9c, 0x4a, 0x60, 0x89, 0x2b, 0x94, 0xd6, 0x14, 0xab, 0x1b, 0xb7, 0xb5, 0xa7,
	0x52, 0xd9, 0x24, 0x5c, 0xaa, 0x5b, 0xcd, 0x16, 0xd2, 0x56, 0x94, 0xb1, 0xb4, 0xdf, 0x96, 0xce,
	0x56, 0x42, 0x95, 0xb4, 0x77, 0xe0, 0x6e, 0x72, 0xdd, 0x88, 0x77, 0x59, 0x18, 0xd1, 0xae, 0xaf,
	0xfd, 0x74, 0x33, 0xb3, 0x95, 0x35, 0xee, 0x0c, 0x57, 0x6f, 0xc5, 0x28, 0xf2, 0x09, 0xdc, 0xf3,
	0x03, 0x76, 0xc1, 0xbd, 0x5e, 0xa8, 0x0a, 0x34, 0xef, 0x82, 0x05, 0x01, 0xb7, 0x99, 0xf6, 0x0c,
	0x2f, 0xf4, 0x6e, 0x8c, 0xc6, 0x74, 0xa0, 0xa1, 0x90, 0x84, 0xc2, 0x92, 0x4f, 0x7b, 0xa1, 0xd8,
	0x7a, 0x84, 0xce, 0xea, 0x39, 0x4a, 0xef, 0xc1, 0x98, 0x76, 0x1f, 0x0b, 0x9a, 0xa6, 0x24, 0x29,
	0x3d, 0x4e, 0x05, 0x9b, 0x27, 0xae, 0xc3, 0xbb, 0x3c, 0x62, 0xb6, 0x51, 0xf0, 0x13, 0x70, 0x62,
	0xc2, 0x9d, 0x31, 0x0f, 0x8f, 0xde, 0xe2, 0xdd, 0xdb, 0xb9, 0xf7, 0xd5, 0x11, 0xf7, 0x8e, 0xfe,
	0xe5, 0x31, 0xe4, 0xc5, 0x02, 0xb1, 0xdf, 0x7a, 0x81, 0xe7, 0x85, 0x53, 0x2f, 0x8a, 0xdd, 0xd5,
	0x7d, 0x58, 0x94, 0x3b, 0x08, 0x98, 0xf6, 0x33, 0x19, 0x56, 0x71, 0x96, 0x80, 0x91, 0xdf, 0x81,
	0x36, 0x4c, 0xc2, 0xfd, 0x80, 0x7b, 0x81, 0x50, 0x86, 0xa0, 0xe7, 0xb0, 0x50, 0xdb, 0xc6, 0x1d,
	0x6e, 0x0e, 0x77, 0x38, 0xc8, 0xc9, 0x8f, 0x15, 0xa1, 0x21, 0xe8, 0x4a, 0x4f, 0xcf, 0xcd, 0xab,
	0xb1, 0xe6, 0x21, 0x75, 0x7b, 0xd4, 0x31, 0xd6, 0xc3, 0x54, 0xf4, 0xf8, 0x65, 0x4b, 0xe7, 0xc9,
	0x59, 0xa8, 0xbd, 0x87, 0x3e, 0x22, 0x71, 0xd9, 0xc7, 0x31, 0x4a, 0xff, 0xaf, 0x38, 0x7b, 0x4d,
	0xa6, 0x11, 0x95, 0x80, 0x89, 0xdc, 0x4a, 0x14, 0x41, 0x8c, 0x06, 0x56, 0xc7, 0x1c, 0xd6, 0xdc,
	0x39, 0x09, 0x11, 0x91, 0x20, 0x19, 0x24, 0xe6, 0x47, 0x83, 0xc4, 0x64, 0x9e, 0xb9, 0x90, 0x96,
	0x67, 0xee, 0xc3, 0x92, 0xcc, 0x51, 0xe2, 0x64, 0x23, 0x8b, 0x99, 0xd9, 0x93, 0x61, 0x41, 0x77,
	0x45, 0x76, 0x63, 0x14, 0x90, 0x2f, 0xce, 0x3b, 0x2a, 0x90, 0x0b, 0xe9, 0x85, 0xb4, 0x04, 0xac,
	0x5c, 0xf3, 0x3b, 0xcf, 0xae, 0x98, 0x43, 0x1e, 0x6d, 0xbb, 0x49, 0x2f, 0xd0, 0x44, 0x8c, 0xc5,
	0x50, 0x7d, 0x6d, 0x7c, 0x07, 0x8b, 0x31, 0x94, 0x10, 0x98, 0xc3, 0x02, 0x53, 0x9c, 0xb9, 0x60,
	0xe0, 0x37, 0xd1, 0x20, 0x1b, 0x1f, 0x46, 0xe4, 0x4c, 0xf3, 0x46, 0x3c, 0x14, 0x82, 0x08, 0xe3,
	0xba, 0x79, 0x56, 0x66, 0x81, 0xa1, 0x2a, 0x9c, 0xdf, 0x82, 0x5c, 0xc8, 0xdb, 0x2e, 0x8d, 0x7a,
	0x81, 0xac, 0x48, 0x16, 0x8c, 0x21, 0x40, 0xff, 0xe7, 0x0c, 0xbc, 0x95, 0x76, 0x4a, 0x91, 0x60,
	0x89, 0xaa, 0x80, 0x7c, 0x05, 0x73, 0x62, 0x22, 0x95, 0x2d, 0x27, 0x73, 0xa1, 0x83, 0x8a, 0xd9,
	0xaa, 0x96, 0x0f, 0x4b, 0xeb, 0xc9, 0x91, 0x79, 0xd0, 0x68, 0xec, 0x99, 0x07, 0x27, 0xdf, 0x36,
	0x0d, 0xe4, 0x13, 0xe7, 0x10, 0x45, 0x87, 0xec, 0x8a, 0x18, 0xf8, 0x4d, 0x5e, 0x4f, 0x34, 0x2c,
	0x66, 0x6f, 0x67, 0x3e, 0xa3, 0x3d, 0x0b, 0xfd, 0xd7, 0x70, 0x3f, 0xed, 0x2c, 0x15, 0x8f, 0x5a,
	0x9d, 0xff, 0xed, 0x41, 0xf4, 0x7f, 0xcf, 0xc0, 0x4f, 0x27, 0x66, 0xff, 0x85, 0xc7, 0xdd, 0xdd,
	0xc0, 0xa3, 0xb6, 0x45, 0xc3, 0xa8, 0xd2, 0xa1, 0xae, 0xcb, 0x1c, 0x71, 0x4d, 0x96, 0xfc, 0x54,
	0x95, 0x56, 0x3c, 0x24, 0x1f, 0x82, 0x70, 0x5c, 0x67, 0x2c, 0x08, 0x98, 0x6d, 0xda, 0x4c, 0x16,
	0xef, 0xf1, 0x75, 0xe6, 0x8c, 0xb5, 0x01, 0x72, 0x6f, 0x88, 0x23, 0x1f, 0xc1, 0xfa, 0x90, 0x09,
	0x2b, 0xf4, 0xa0, 0x6f, 0x5a, 0x22, 0xb2, 0xce, 0x8e, 0x71, 0x55, 0x24, 0xb2, 0x22, 0xe2, 0xab,
	0x74, 0xa1, 0x8a, 0x6b, 0xd0, 0xd8, 0x40, 0x36, 0x59, 0x96, 0x0e, 0x77, 0x12, 0x57, 0x53, 0x82,
	0x4f, 0xdf, 0x85, 0x67, 0x93, 0x1a, 0xeb, 0x78, 0x21, 0x9b, 0xfe, 0x98, 0xfa, 0x67, 0xf0, 0xc9,
	0xc4, 0x1c, 0x2d, 0xaf, 0xdd, 0x76, 0x26, 0x26, 0xa9, 0xd0, 0x2e, 0x0b, 0x68, 0x97, 0xba, 0xb2,
	0x9a, 0xd1, 0x3f, 0x91, 0x5d, 0xb7, 0x11, 0xce, 0x57, 0x22, 0xb1, 0x7e, 0x08, 0x90, 0xe8, 0x5c,
	0xc8, 0xba, 0x32, 0x47, 0xe3, 0x86, 0x85, 0xfe, 0x15, 0x3c, 0x4c, 0xe5, 0xdb, 0x0f, 0xbc, 0xae,
	0x50, 0xe5, 0x31, 0xfe, 0xcc, 0x38, 0xbf, 0x2a, 0x72, 0x46, 0xf8, 0xeb, 0x8c, 0x5e, 0x30, 0xfd,
	0xeb, 0x14, 0xe7, 0x54, 0xa7, 0x3d, 0xd7, 0xea, 0xa4, 0xb8, 0x98, 0xf9, 0x14, 0x17, 0xa3, 0x7f,
	0x2a, 0x2d, 0xac, 0xec, 0xfb, 0x0e, 0xd6, 0x2d, 0x2d, 0x6f, 0x64, 0xb2, 0x64, 0xcb, 0x2b, 0x93,
	0x6c, 0x79, 0xe9, 0x6f, 0xc1, 0x86, 0xec, 0x28, 0x31, 0x1a, 0x8c, 0xca, 0x52, 0xe8, 0xe3, 0x5f,
	0x66, 0x52, 0x64, 0x55, 0xe7, 0x61, 0x34, 0xe2, 0x15, 0x67, 0x46, 0xbd, 0xe2, 0x3a, 0x2c, 0xa8,
	0x34, 0x44, 0x8a, 0x50, 0x8d, 0xc8, 0x5e, 0xb2, 0x22, 0x9a, 0x43, 0x0b, 0xb9, 0x93, 0xb4, 0x10,
	0x95, 0xb5, 0x95, 0x88, 0x1c, 0x96, 0x0f, 0xab, 0x87, 0x8d, 0xbd, 0xaa, 0x79, 0xd4, 0x38, 0xaa,
	0x0e, 0x4b, 0x27, 0xfd, 0xcf, 0x16, 0x40, 0x4f, 0xdd, 0x92, 0x21, 0x1b, 0x1a, 0xac, 0x2a, 0xd4,
	0x93, 0xac, 0xc1, 0x4c, 0x5c, 0x11, 0xee, 0xce, 0xfd, 0xfe, 0xef, 0x1e, 0x66, 0x8c, 0x19, 0x6e,
	0x93, 0x06, 0x64, 0x93, 0x6d, 0x90, 0xfc, 0xce, 0xc7, 0x57, 0xf8, 0xcf, 0x89, 0x09, 0x55, 0x4d,
	0x28, 0xbb, 0x24, 0x46, 0x3c, 0x0b, 0x79, 0x0e, 0xab, 0x01, 0xfb, 0xae, 0xc7, 0x03, 0x16, 0x9a,
	0x03, 0x79, 0x2c, 0xc8, 0xea, 0x25, 0x46, 0x1c, 0x2b, 0xb9, 0x3c, 0x87, 0x55, 0x87, 0x51, 0x9b,
	0x05, 0xc9, 0xfe, 0x58, 0x56, 0xb6, 0x49, 0x24, 0x62, 0xd8, 0x1c, 0xbb, 0x0f, 0x8b, 0xed, 0x1e,
	0x77, 0xec, 0x61, 0x8f, 0x32, 0x8b, 0xe3, 0x9a, 0x2d, 0xb4, 0x4c, 0xa2, 0x1c, 0xaf, 0xed, 0x61,
	0xc9, 0x37, 0x67, 0xe4, 0x10, 0x52, 0xf7, 0xda, 0x9e, 0xf0, 0x85, 0x98, 0xe8, 0x02, 0x5e, 0x0a,
	0x7e, 0xa7, 0x66, 0xcc, 0xf9, 0xd4, 0x8c, 0x79, 0xe4, 0x8e, 0x0a, 0xb7, 0xbc, 0x23, 0xa1, 0xb4,
	0x67, 0x01, 0x67, 0xae, 0x6d, 0xfa, 0x01, 0x0b, 0x99, 0x1b, 0xa9, 0x82, 0x6e, 0x49, 0x42, 0x8f,
	0x25, 0x50, 0x18, 0x77, 0x9c, 0xea, 0x2e, 0xcb, 0x33, 0xaa, 0x61, 0x5a, 0xe2, 0xbe, 0x92, 0x96,
	0xb8, 0x6f, 0x41, 0x71, 0x98, 0x30, 0x4b, 0xbf, 0xa5, 0xaa, 0xb5, 0xe5, 0x6e, 0x9c, 0x2f, 0xa3,
	0xc3, 0x9a, 0xac, 0xd9, 0x57, 0x53, 0x6a, 0xf6, 0x9b, 0x13, 0x6b, 0x72, 0x53, 0x62, 0xfd, 0x00,
	0x72, 0x2a, 0x5f, 0x1d, 0x94, 0x6d, 0xaa, 0x70, 0xac, 0xd9, 0x1b, 0x47, 0x50, 0x48, 0xaa, 0xd1,
	0x0d, 0x0e, 0x43, 0x64, 0x69, 0xea, 0x64, 0x89, 0x16, 0x06, 0x48, 0x90, 0x38, 0xbe, 0x6e, 0xa5,
	0x78, 0xa4, 0xa4, 0xe6, 0x92, 0x5d, 0xc0, 0x6e, 0x88, 0x48, 0x8e, 0x66, 0x50, 0xdf, 0xb7, 0xa6,
	0xd5, 0x77, 0x23, 0x66, 0xd4, 0xff, 0x14, 0x96, 0x04, 0xf9, 0xd0, 0xf4, 0x9f, 0x8d, 0x8b, 0x52,
	0xf5, 0x4b, 0xdf, 0x1f, 0x93, 0xe6, 0x88, 0x2e, 0xcd, 0xdc, 0xd6, 0xde, 0x7f, 0x2d, 0x3d, 0xd0,
	0xb5, 0x67, 0xcb, 0xdc, 0xf6, 0x6c, 0x7f, 0x48, 0xf3, 0x6f, 0x22, 0xde, 0x5e, 0xd7, 0x57, 0x9a,
	0x74, 0xc9, 0x33, 0x69, 0x59, 0x5f, 0xd2, 0x43, 0xce, 0x8e, 0x7a, 0xc8, 0x94, 0x32, 0x69, 0x2e,
	0xad, 0x4c, 0xba, 0xb2, 0xac, 0x99, 0xbf, 0xb2, 0xac, 0xd1, 0x9d, 0x14, 0x9d, 0x10, 0x27, 0x1a,
	0xc8, 0xed, 0xd5, 0xa0, 0x7d, 0x3d, 0xd1, 0x9c, 0x14, 0x74, 0xaa, 0x17, 0x89, 0x9d, 0x6b, 0x0d,
	0x6f, 0xe6, 0x17, 0x8d, 0xda, 0x91, 0x69, 0x54, 0x9b, 0x27, 0xf5, 0x96, 0xd9, 0x3c, 0xa9, 0x54,
	0xaa, 0xcd, 0x66, 0xdc, 0xaf, 0xd6, 0xbf, 0x92, 0xce, 0x78, 0x5f, 0xd9, 0xf5, 0x84, 0xd4, 0xbf,
	0xeb, 0xb1, 0x10, 0x0d, 0x5d, 0x5a, 0xbe, 0xbc, 0xaa, 0x25, 0x23, 0x1e, 0xea, 0x1c, 0x9e, 0x5e,
	0xcb, 0xff, 0x23, 0xde, 0xf5, 0xcf, 0x65, 0x6a, 0x75, 0x20, 0x3c, 0x65, 0x97, 0x46, 0xec, 0xca,
	0xdd, 0xae, 0xc3, 0x02, 0xba, 0xd3, 0x78, 0xb3, 0x6a, 0xa4, 0x3b, 0x32, 0x6b, 0xb9, 0x6e, 0x82,
	0x1f, 0x71, 0xbb, 0x35, 0x29, 0x59, 0x71, 0x25, 0xf4, 0xd4, 0x61, 0x95, 0x11, 0x3f, 0x1d, 0xc6,
	0x7b, 0x7d, 0x9a, 0x6a, 0x8b, 0xa3, 0x86, 0xa8, 0xff, 0x55, 0x06, 0xb6, 0xae, 0x9d, 0x2b, 0x19,
	0x38, 0x27, 0xdb, 0x1b, 0x99, 0x94, 0xf6, 0xc6, 0x63, 0xc8, 0x4b, 0xf3, 0x90, 0x3e, 0x77, 0x26,
	0xee, 0x4f, 0x89, 0x44, 0x0e, 0xfd, 0xed, 0x13, 0x28, 0x8c, 0x78, 0x65, 0xd5, 0xa5, 0xf7, 0x87,
	0x2e, 0x59, 0x8f, 0xe4, 0xdd, 0xdf, 0xb0, 0x2b, 0x72, 0x38, 0xf2, 0x48, 0x29, 0xe5, 0xb9, 0x3d,
	0x94, 0xe7, 0x34, 0x87, 0x4a, 0x3c, 0x64, 0xea, 0x5d, 0xd8, 0x9c, 0x64, 0xab, 0x4b, 0xa1, 0xff,
	0x10, 0xa9, 0xa6, 0x08, 0x6a, 0x66, 0x52, 0x50, 0xfa, 0xbf, 0xce, 0x4a, 0xad, 0xb9, 0x62, 0xbd,
	0xa4, 0xe4, 0xaf, 0xe9, 0xb2, 0x4f, 0xb5, 0x96, 0x08, 0x27, 0x72, 0x02, 0x0c, 0x17, 0xd2, 0xe7,
	0xe4, 0x10, 0x82, 0xc1, 0xf2, 0x09, 0x14, 0x64, 0xda, 0xa2, 0xae, 0x64, 0x4e, 0x3d, 0x9c, 0x20,
	0x4c, 0xde, 0x5a, 0x6a, 0x8a, 0x32, 0x9f, 0x9e, 0xa2, 0x08, 0x15, 0x90, 0xb4, 0xb8, 0xdc, 0x82,
	0x8c, 0x4e, 0x12, 0x84, 0xeb, 0xa5, 0x04, 0xf1, 0xec, 0xb4, 0x41, 0x7c, 0x71, 0xba, 0x20, 0x9e,
	0xbb, 0x55, 0x10, 0x87, 0x9b, 0x82, 0xf8, 0x26, 0x14, 0x3a, 0x34, 0x91, 0xd0, 0xc9, 0xae, 0x36,
	0x74, 0x68, 0x9c, 0xcb, 0xe9, 0xe7, 0xf0, 0xe4, 0xc6, 0x5b, 0x25, 0xfb, 0xe3, 0x6e, 0xe0, 0xc5,
	0x55, 0x6a, 0x9b, 0xa6, 0x0f, 0x43, 0x57, 0xf0, 0xd7, 0x73, 0xa0, 0x09, 0x9e, 0x5f, 0xf6, 0xb8,
	0x75, 0x2e, 0x18, 0x87, 0x4c, 0x7d, 0x7c, 0x18, 0x95, 0xcf, 0x98, 0x69, 0x2a, 0x4b, 0x24, 0xae,
	0xf9, 0x83, 0x15, 0x77, 0xda, 0x5f, 0x08, 0x9a, 0xb0, 0x66, 0x61, 0xaf, 0xc1, 0x1c, 0x6d, 0x71,
	0xcc, 0x4d, 0xdb, 0xe2, 0x20, 0x92, 0xbd, 0x9e, 0x6c, 0x74, 0xe8, 0xb0, 0x24, 0x9f, 0x04, 0xa8,
	0xdb, 0x17, 0xca, 0x83, 0x2a, 0x18, 0xbf, 0x3d, 0x94, 0xdd, 0xfe, 0x21, 0xf5, 0x89, 0x09, 0x77,
	0xd4, 0xb9, 0xd5, 0x8b, 0xb7, 0xb8, 0xeb, 0x50, 0x5b, 0x40, 0x41, 0xbf, 0x37, 0x5c, 0x37, 0x4d,
	0x68, 0xdb, 0x75, 0xe4, 0x94, 0xf2, 0x10, 0xf7, 0x6f, 0xac, 0x3a, 0x63, 0x90, 0x70, 0xf4, 0x09,
	0x3e, 0x3b, 0xed, 0x13, 0xfc, 0x86, 0x03, 0xc5, 0xf1, 0xd9, 0xa7, 0xf3, 0x27, 0x04, 0xe6, 0xc4,
	0x24, 0x71, 0x13, 0x43, 0x7c, 0x0b, 0x1b, 0x53, 0xa7, 0x1b, 0xd4, 0xe2, 0x59, 0x03, 0x24, 0x08,
	0x2b, 0x69, 0x4f, 0x7a, 0xb3, 0xb4, 0x43, 0xfe, 0xdf, 0x04, 0xfc, 0xff, 0x9c, 0x91, 0x0f, 0x84,
	0xbb, 0x5e, 0x24, 0xb3, 0x94, 0x69, 0x5a, 0x68, 0x53, 0x66, 0x4c, 0xbf, 0x01, 0x92, 0xf2, 0xa8,
	0x75, 0xcb, 0xb6, 0xcd, 0xaa, 0x3d, 0xf1, 0xa2, 0x15, 0x77, 0x67, 0xe6, 0x6e, 0xd9, 0x66, 0xba,
	0xf6, 0x49, 0xef, 0x4f, 0x60, 0x65, 0xbc, 0x5f, 0xbb, 0x70, 0xbb, 0x9d, 0x2f, 0xdb, 0x23, 0xcd,
	0x5a, 0xfd, 0x5f, 0x32, 0xf2, 0x49, 0xbe, 0x92, 0xc8, 0x0d, 0x7f, 0x44, 0xa9, 0x3f, 0x02, 0x18,
	0x6b, 0x92, 0x2d, 0x19, 0x09, 0xc8, 0xe8, 0xa9, 0xe7, 0x86, 0xcf, 0xa8, 0x78, 0xea, 0x22, 0xcc,
	0xc6, 0xf6, 0x99, 0x33, 0xc4, 0x67, 0x8a, 0x77, 0xc9, 0xa6, 0x84, 0xc5, 0x3f, 0x64, 0xe0, 0x8e,
	0x38, 0x53, 0xf5, 0x42, 0x3d, 0xf4, 0xfe, 0xff, 0x3f, 0xd2, 0x57, 0xf2, 0xa1, 0x5a, 0xdc, 0x73,
	0xe2, 0x87, 0x8a, 0x41, 0x6b, 0xf0, 0x31, 0xe4, 0x2f, 0xa9, 0x1b, 0x85, 0xa6, 0x25, 0x86, 0x78,
	0xb4, 0x45, 0x03, 0x10, 0x84, 0x04, 0xfa, 0xbe, 0x6c, 0x0f, 0xc9, 0xbe, 0x78, 0x74, 0x10, 0x78,
	0x3d, 0xbf, 0x8e, 0xc1, 0x94, 0xbc, 0x00, 0xe2, 0xb2, 0x4b, 0x53, 0x45, 0x5b, 0xec, 0xb9, 0x0e,
	0x52, 0x84, 0xa2, 0xcb, 0x2e, 0x25, 0x59, 0x53, 0xc2, 0xf5, 0x40, 0x76, 0x74, 0xf0, 0xbd, 0x9f,
	0xba, 0x16, 0x73, 0x70, 0xaa, 0x9a, 0x7b, 0xc1, 0x23, 0x86, 0xbf, 0x6a, 0x70, 0xfc, 0xb4, 0xe3,
	0x89, 0x64, 0x70, 0x5a, 0x30, 0x56, 0x14, 0x5c, 0xcd, 0x33, 0x42, 0x8a, 0xff, 0x55, 0xc4, 0xcf,
	0xfb, 0x43, 0xd2, 0x03, 0x05, 0xd6, 0xdf, 0x1f, 0xae, 0x19, 0xef, 0xbd, 0xe1, 0x33, 0xd5, 0x70,
	0x13, 0x9e, 0xcd, 0xf3, 0x99, 0xab, 0xce, 0x8c, 0xdf, 0xfa, 0xd7, 0x32, 0xa4, 0xe1, 0xa3, 0xad,
	0x20, 0x3f, 0x64, 0x41, 0x9b, 0xc9, 0x4d, 0x0a, 0x79, 0x7b, 0x51, 0x87, 0x05, 0x72, 0xd9, 0x61,
	0x3a, 0x54, 0x40, 0xa8, 0x3c, 0x8e, 0xad, 0x9f, 0x0e, 0xd7, 0x1c, 0xce, 0x30, 0x70, 0x7a, 0x2f,
	0x80, 0x70, 0x97, 0x47, 0x9c, 0x46, 0xde, 0xc4, 0x3c, 0xc5, 0x01, 0x46, 0xcd, 0x25, 0x52, 0x7e,
	0xf9, 0xc7, 0x02, 0xea, 0xd3, 0xa2, 0xa1, 0x46, 0xfa, 0x6f, 0x65, 0x63, 0x6e, 0x7c, 0x0d, 0xdf,
	0xe9, 0x93, 0xc6, 0x98, 0x57, 0x55, 0xef, 0x3f, 0xd5, 0x89, 0xfd, 0x08, 0xbf, 0xba, 0x71, 0x6e,
	0xa6, 0x22, 0xcc, 0xc6, 0xab, 0x81, 0x67, 0xfd, 0x8b, 0x39, 0x59, 0xb9, 0xa9, 0xf7, 0x6e, 0x2f,
	0x40, 0xc7, 0x2c, 0x94, 0x2b, 0x0e, 0x8b, 0x1b, 0x89, 0xff, 0x55, 0x32, 0xaa, 0xb5, 0xa0, 0xc6,
	0x22, 0x79, 0x94, 0x8f, 0x58, 0x83, 0x70, 0x9e, 0xc5, 0x71, 0xcd, 0x16, 0x79, 0x98, 0x8a, 0x3e,
	0x63, 0xed, 0x7b, 0x15, 0x94, 0x9a, 0xaa, 0x89, 0x2f, 0x6c, 0x2f, 0x0a, 0x04, 0x45, 0x2f, 0x70,
	0x94, 0x59, 0xe4, 0x24, 0xe4, 0x24, 0x70, 0xf0, 0xc5, 0x59, 0xa2, 0x31, 0x95, 0x93, 0xf6, 0xa1,
	0x38, 0x30, 0x8f, 0x1b, 0x69, 0x7d, 0x2c, 0x8c, 0xb6, 0x3e, 0xc6, 0xdf, 0xab, 0xb3, 0x13, 0xef,
	0xd5, 0x43, 0x82, 0xc1, 0xf3, 0xc6, 0x80, 0x00, 0x1f, 0x2b, 0x5e, 0x41, 0x21, 0x7e, 0xd0, 0x46,
	0x2f, 0x9e, 0xc3, 0x90, 0x9c, 0xa8, 0xac, 0xae, 0x14, 0xdc, 0x76, 0x8b, 0xd1, 0xae, 0x91, 0x57,
	0xdc, 0xd8, 0xaa, 0xad, 0x42, 0x0e, 0x5f, 0xbb, 0x71, 0x26, 0xf8, 0x81, 0x33, 0x2d, 0x0a, 0x56,
	0xf1, 0xb5, 0xf1, 0x2d, 0xcc, 0xe1, 0x74, 0x57, 0xb5, 0x57, 0x85, 0x4c, 0xa2, 0x81, 0xc8, 0xd4,
	0x3f, 0x28, 0x51, 0x42, 0x60, 0x88, 0xc4, 0x46, 0x9e, 0xbc, 0x12, 0x44, 0xd6, 0xbd, 0xb6, 0xa7,
	0xff, 0x83, 0x7a, 0x34, 0x69, 0xb2, 0x68, 0x74, 0x3b, 0x53, 0xfc, 0xf9, 0x32, 0x5a, 0x08, 0xcc,
	0x8c, 0x17, 0x02, 0xd7, 0x74, 0x26, 0xf6, 0xd5, 0x1f, 0x16, 0xa3, 0x69, 0xdc, 0xd3, 0x29, 0x44,
	0x23, 0xff, 0xac, 0x50, 0x03, 0xfd, 0x77, 0xd2, 0xbc, 0xa5, 0x57, 0x1f, 0xe5, 0x49, 0x71, 0xe2,
	0x99, 0x34, 0x27, 0xfe, 0x25, 0x64, 0xe3, 0x5d, 0xcc, 0xe0, 0x2e, 0xf4, 0xc4, 0x2e, 0xae, 0x10,
	0x8a, 0x11, 0xb3, 0xc4, 0xcd, 0xf6, 0x51, 0x2a, 0x51, 0x6e, 0xeb, 0xff, 0x3d, 0x03, 0x8f, 0xd2,
	0x51, 0x89, 0x92, 0x73, 0x2c, 0x71, 0xff, 0xf0, 0x2a, 0x01, 0x24, 0xd9, 0xb6, 0x47, 0x51, 0x83,
	0xfc, 0x7d, 0xe3, 0xcf, 0x67, 0x60, 0x79, 0x4c, 0x06, 0xb7, 0xfd, 0x6d, 0x29, 0xb5, 0xdf, 0x3c,
	0xfb, 0x03, 0xfa, 0xcd, 0x73, 0xe9, 0xc5, 0xdc, 0x78, 0x6d, 0x38, 0x3f, 0x59, 0x1b, 0x8e, 0xab,
	0x46, 0xf6, 0x96, 0xaa, 0x61, 0xc8, 0x66, 0x84, 0x4c, 0xa0, 0x5b, 0xde, 0x41, 0x45, 0x55, 0xdd,
	0xe8, 0x86, 0x44, 0x0a, 0xdd, 0x0e, 0x68, 0xb7, 0xc5, 0xad, 0x73, 0x16, 0xa5, 0xb9, 0xae, 0x4c,
	0x8a, 0xeb, 0xd2, 0xfb, 0xf0, 0xfe, 0xb4, 0x73, 0x0e, 0x2e, 0xf9, 0x5d, 0x58, 0x15, 0xde, 0x85,
	0x3a, 0xfc, 0x7b, 0x66, 0x9b, 0x11, 0x22, 0xd5, 0x4b, 0x68, 0x71, 0x88, 0x50, 0x1b, 0xd1, 0x20,
	0x1b, 0xff, 0x70, 0xa9, 0x5e, 0x3b, 0xd4, 0x50, 0xff, 0x8f, 0x59, 0x59, 0x0a, 0x1e, 0x54, 0x5a,
	0x9e, 0x5c, 0x3f, 0xed, 0x20, 0x2f, 0x40, 0x55, 0x62, 0xd8, 0xc4, 0x33, 0xd9, 0x1b, 0x9f, 0x07,
	0x32, 0xbf, 0xc9, 0x1a, 0x45, 0x89, 0x69, 0xf1, 0x2e, 0xab, 0x22, 0x9c, 0x7c, 0x01, 0x1b, 0x8a,
	0x9a, 0xf6, 0xa2, 0x8e, 0x17, 0xe0, 0x0e, 0x07, 0x12, 0x90, 0xff, 0xfe, 0xdd, 0x93, 0x14, 0xe5,
	0x01, 0x41, 0xec, 0xc6, 0xff, 0x18, 0x1e, 0x4c, 0x32, 0xfb, 0xf8, 0xaf, 0x86, 0xc9, 0x7d, 0x55,
	0x43, 0x68, 0xe3, 0xdc, 0xf2, 0x67, 0x8e, 0x9a, 0x9f, 0x58, 0x5b, 0x5c, 0xda, 0xb8, 0xf4, 0xe7,
	0x92, 0x6b, 0x1f, 0x0c, 0x08, 0xe2, 0xb5, 0x3f, 0x05, 0x6d, 0x92, 0xd9, 0x65, 0x83, 0x36, 0xc2,
	0x82, 0x71, 0x77, 0x9c, 0xf5, 0x88, 0x09, 0xfd, 0x7b, 0x07, 0x8a, 0x71, 0x15, 0x3b, 0x78, 0x47,
	0x5e, 0xc0, 0xbb, 0x58, 0x51, 0x15, 0x6c, 0x0c, 0x16, 0xc5, 0x61, 0x7c, 0x3e, 0xdf, 0x1f, 0x3e,
	0xa1, 0xe4, 0xd5, 0x89, 0x7c, 0x11, 0xcf, 0xb7, 0x07, 0xc5, 0x21, 0x7b, 0x13, 0x05, 0xd4, 0x3c,
	0xe3, 0xcc, 0xb1, 0x43, 0x6d, 0x71, 0x73, 0x76, 0xab, 0x10, 0xd7, 0x7a, 0x55, 0x81, 0xd9, 0x47,
	0x44, 0xba, 0x2e, 0x14, 0xd3, 0x75, 0x41, 0x7f, 0x5b, 0x76, 0xe6, 0x86, 0x17, 0xae, 0x94, 0xad,
	0x9e, 0xfc, 0x07, 0x59, 0xff, 0x0d, 0x3c, 0xbf, 0x99, 0x6a, 0xa0, 0x8c, 0x57, 0xfd, 0xde, 0x9c,
	0xb9, 0xea, 0xf7, 0xe6, 0xe7, 0x7f, 0x9b, 0x07, 0xed, 0xaa, 0xdf, 0x8a, 0xc9, 0x33, 0x98, 0xe2,
	0xa7, 0xe3, 0xe2, 0x4f, 0xc8, 0x13, 0x78, 0x78, 0x0d, 0x5d, 0xe3, 0x55, 0x31, 0x43, 0xde, 0x83,
	0x77, 0xaf, 0x21, 0x29, 0x3b, 0xf8, 0x0b, 0x6a, 0x13, 0x33, 0x74, 0xee, 0xb6, 0x8b, 0x33, 0xe4,
	0x39, 0x3c, 0xbb, 0x86, 0x61, 0x9f, 0x72, 0x47, 0xfd, 0x4f, 0x5d, 0xb4, 0xc9, 0xbb, 0xf0, 0x47,
	0x37, 0xd0, 0x32, 0xbb, 0xd6, 0x76, 0xbd, 0x80, 0x15, 0x19, 0xd9, 0x81, 0xed, 0x6b, 0x88, 0xf1,
	0xbb, 0x4b, 0xcf, 0x45, 0x1d, 0xce, 0x43, 0x7a, 0xea, 0x30, 0xbb, 0x78, 0x46, 0x5e, 0xc0, 0xd6,
	0x35, 0x3c, 0xb2, 0xf2, 0x6e, 0x9c, 0x9d, 0x39, 0xdc, 0x65, 0xc5, 0xf6, 0xf4, 0x2b, 0x54, 0x3c,
	0xcf, 0xb1, 0xbd, 0x4b, 0xb7, 0xd8, 0x21, 0xdb, 0xf0, 0xfc, 0x1a, 0x1e, 0x79, 0xf5, 0x8d, 0x5e,
	0xd4, 0x38, 0xdb, 0xa3, 0x11, 0x2b, 0x72, 0xf2, 0x29, 0x7c, 0x78, 0x1d, 0xbd, 0xd7, 0xf5, 0x59,
	0xc4, 0x23, 0x7e, 0xc1, 0x8e, 0xbc, 0xba, 0x77, 0x19, 0xff, 0xf9, 0x52, 0xfc, 0x2d, 0xf9, 0x18,
	0x3e, 0x98, 0x96, 0x31, 0x3a, 0x71, 0x1d, 0xcf, 0x3a, 0x67, 0x76, 0xf1, 0xfc, 0x86, 0x33, 0xc5,
	0xfd, 0xd2, 0x24, 0x8f, 0x43, 0xbe, 0x84, 0xcf, 0xa6, 0x5e, 0xaa, 0xea, 0x7a, 0xbd, 0x76, 0xa7,
	0x79, 0xce, 0x1d, 0x47, 0xf8, 0xbc, 0x62, 0xf7, 0x26, 0x29, 0xf2, 0x30, 0xe4, 0x6e, 0xbb, 0x86,
	0x29, 0xb8, 0x83, 0x7c, 0x45, 0x77, 0xfa, 0x15, 0x0d, 0xea, 0x9e, 0x37, 0x7d, 0xa1, 0x74, 0x2d,
	0xcf, 0xab, 0xd3, 0xa0, 0xcd, 0x8a, 0x1e, 0xf9, 0x10, 0xde, 0xbb, 0x6e, 0x45, 0x0c, 0x62, 0x4a,
	0x53, 0x6b, 0xb2, 0xdf, 0x51, 0xf4, 0xa7, 0x62, 0x3a, 0xf2, 0xa2, 0xd7, 0xe5, 0xca, 0x6b, 0x16,
	0xf0, 0x33, 0xce, 0xec, 0xe2, 0x77, 0xe4, 0x73, 0xf8, 0xf8, 0x1a, 0xa6, 0x6f, 0x18, 0x3b, 0x67,
	0xae, 0xdd, 0xf2, 0x7a, 0x81, 0xcb, 0xfa, 0xbb, 0xd4, 0xc6, 0x42, 0xb0, 0xc9, 0xbf, 0x67, 0xc5,
	0x80, 0x7c, 0x05, 0xa5, 0xa9, 0x59, 0x45, 0x52, 0xb9, 0xdb, 0xeb, 0xd7, 0xdc, 0x96, 0xe7, 0x35,
	0xbb, 0xd4, 0x71, 0x8a, 0x21, 0xd9, 0x83, 0xaf, 0xa7, 0xe6, 0xaf, 0xb9, 0x36, 0xbf, 0xe0, 0x76,
	0x8f, 0x3a, 0xf1, 0x2c, 0x52, 0x54, 0xd1, 0xad, 0x77, 0x21, 0xf9, 0x7b, 0xa4, 0x04, 0x9f, 0xdc,
	0x28, 0x35, 0x75, 0xc5, 0x58, 0xdb, 0x37, 0x2e, 0x5d, 0x16, 0x84, 0x1d, 0xee, 0x17, 0x2f, 0xc8,
	0x67, 0xf0, 0xd1, 0xd4, 0x6b, 0x27, 0x15, 0xf2, 0x92, 0x7c, 0x0d, 0x5f, 0x4e, 0xcd, 0x69, 0x30,
	0x8b, 0xb9, 0x91, 0x90, 0x3c, 0xb7, 0xb8, 0x4f, 0x85, 0xc7, 0x2c, 0xbe, 0x21, 0x3f, 0x87, 0x2f,
	0xa6, 0xdd, 0x77, 0xd9, 0xb5, 0x3a, 0x5e, 0xc0, 0xec, 0xe3, 0x8e, 0xe7, 0xb2, 0xa3, 0x9e, 0xc0,
	0x14, 0xfb, 0x37, 0xd8, 0xf9, 0x91, 0x17, 0xc9, 0x39, 0x1a, 0x67, 0x15, 0x87, 0xba, 0xc5, 0xef,
	0x77, 0xe7, 0x5f, 0x66, 0x7e, 0x9f, 0xf9, 0xc9, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xee, 0xb0,
	0x25, 0x0b, 0xa6, 0x36, 0x00, 0x00,
}
